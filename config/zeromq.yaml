# ZeroMQ Configuration for Tasker Core
# Defines endpoints and settings for ZeroMQ pub-sub step execution

step_execution:
  # Pub-Sub endpoints (bidirectional)
  rust_step_publisher: "inproc://steps"      # Rust publishes steps
  rust_result_subscriber: "inproc://results" # Rust subscribes to results
  
  # Handler endpoints (opposite direction) 
  handler_step_subscriber: "inproc://steps"     # Handlers subscribe to steps
  handler_result_publisher: "inproc://results"  # Handlers publish results

  # Processing configuration
  batch_size: 10                    # Maximum steps per batch
  result_timeout_ms: 300000         # 5 minutes max wait for results
  handler_poll_interval_ms: 1       # Polling frequency for non-blocking receives

  # High-water marks for message queuing
  step_queue_hwm: 1000              # Max queued step messages
  result_queue_hwm: 1000            # Max queued result messages

  # Reliability settings
  reconnect_interval_ms: 1000       # Time between reconnection attempts
  max_reconnect_attempts: 10        # Maximum reconnection attempts

# Development and testing settings
development:
  step_execution:
    # Use inproc for development (same process)
    rust_step_publisher: "inproc://dev_steps"
    rust_result_subscriber: "inproc://dev_results"
    handler_step_subscriber: "inproc://dev_steps"
    handler_result_publisher: "inproc://dev_results"
    
    # Shorter timeouts for faster feedback
    result_timeout_ms: 30000        # 30 seconds for development
    handler_poll_interval_ms: 10    # More frequent polling

# Test environment - isolated and predictable
test:
  step_execution:
    # TCP endpoints for cross-language communication between Rust and Ruby
    # Rust side (publishes steps, subscribes to results)
    rust_step_publisher: "tcp://127.0.0.1:8555"
    rust_result_subscriber: "tcp://127.0.0.1:8556"
    # Ruby side (subscribes to steps, publishes results)
    handler_step_subscriber: "tcp://127.0.0.1:8555"
    handler_result_publisher: "tcp://127.0.0.1:8556"
    
    # Test settings optimized for test suite performance
    max_workers: 3                  # Minimal workers for tests
    result_timeout_ms: 10000        # 10 seconds max for tests
    handler_poll_interval_ms: 5     # Quick polling for test responsiveness
    batch_size: 3                   # Small batches for test isolation

# Production settings
production:
  step_execution:
    # Use IPC for production (process isolation)
    rust_step_publisher: "ipc:///tmp/tasker_steps.sock"
    rust_result_subscriber: "ipc:///tmp/tasker_results.sock"
    handler_step_subscriber: "ipc:///tmp/tasker_steps.sock"
    handler_result_publisher: "ipc:///tmp/tasker_results.sock"
    
    # Production timeouts
    result_timeout_ms: 600000       # 10 minutes for complex operations
    handler_poll_interval_ms: 1     # Efficient polling
    
    # Higher throughput settings
    batch_size: 50                  # Larger batches for efficiency
    step_queue_hwm: 10000           # Higher queue limits
    result_queue_hwm: 10000

# Future: Network distribution settings
# network:
#   step_execution:
#     rust_step_publisher: "tcp://*:5555"
#     rust_result_subscriber: "tcp://*:5556"
#     handler_step_subscriber: "tcp://orchestrator:5555"
#     handler_result_publisher: "tcp://orchestrator:5556"