# MPSC Channel Configuration
#
# This file provides unified configuration for ALL Tokio MPSC channel buffer sizes
# across the orchestration, task readiness, and worker subsystems.
#
# Architecture Decision: TAS-51 - Bounded MPSC Channel Migration
# - All channels are bounded to prevent unbounded memory growth
# - Configuration-driven sizing with environment-specific overrides
# - Single source of truth for all MPSC channel capacities
#
# Migrated from event_systems.toml:
# - task_readiness.metadata.event_channel (buffer_size, send_timeout_ms)
# - worker.metadata.in_process_events.broadcast_buffer_size

[mpsc_channels]
# Placeholder for top-level mpsc_channels table

# ============================================================================
# ORCHESTRATION CHANNELS
# ============================================================================

[mpsc_channels.orchestration.command_processor]
# Orchestration command processor channel (TAS-40 pattern)
# Handles: InitializeTask, ProcessStepResult, FinalizeTask commands
command_buffer_size = 1000

[mpsc_channels.orchestration.event_systems]
# Orchestration event system notification channels
# Handles: PGMQ message ready events, internal coordination events
event_channel_buffer_size = 1000

[mpsc_channels.orchestration.event_listeners]
# PGMQ notification listener for orchestration queue
# Previously unbounded! Now bounded to prevent OOM during notification bursts
# Handles: PostgreSQL LISTEN/NOTIFY events for orchestration_* queues
pgmq_event_buffer_size = 10000  # Large buffer for notification bursts

# ============================================================================
# TASK READINESS CHANNELS
# ============================================================================

[mpsc_channels.task_readiness.event_channel]
# Task readiness event channel
# MIGRATED from event_systems.toml: event_systems.task_readiness.metadata.event_channel
# Handles: Task readiness notifications and state change events
buffer_size = 1000
send_timeout_ms = 1000

# ============================================================================
# WORKER CHANNELS
# ============================================================================

[mpsc_channels.worker.command_processor]
# Worker command processor channel
# Handles: ExecuteStep, SendStepResult, ProcessStepCompletion commands
command_buffer_size = 1000

[mpsc_channels.worker.event_systems]
# Worker event system notification channels
# Handles: PGMQ message ready events for namespace queues
event_channel_buffer_size = 1000

[mpsc_channels.worker.event_subscribers]
# Step completion and result channels
# Handles: Step execution completion notifications and result processing
completion_buffer_size = 1000
result_buffer_size = 1000

[mpsc_channels.worker.in_process_events]
# In-process event broadcast channel (for FFI integration)
# MIGRATED from event_systems.toml: event_systems.worker.metadata.in_process_events.broadcast_buffer_size
# Handles: Rust → Ruby event broadcasts across FFI boundary
broadcast_buffer_size = 1000

[mpsc_channels.worker.event_listeners]
# PGMQ notification listener for worker namespace queues
# Handles: PostgreSQL LISTEN/NOTIFY events for {namespace}_queue
pgmq_event_buffer_size = 1000

# ============================================================================
# SHARED/CROSS-CUTTING CHANNELS
# ============================================================================

[mpsc_channels.shared.event_publisher]
# Internal event publishing queue
# Previously unbounded! Now bounded to prevent event storm OOM
# Handles: System-wide event publishing (step completions, state transitions)
event_queue_buffer_size = 5000

[mpsc_channels.shared.ffi]
# Ruby FFI event communication channel
# Previously unbounded! Now bounded to provide backpressure
# Handles: Rust → Ruby event communication across FFI boundary
ruby_event_buffer_size = 1000

# ============================================================================
# OVERFLOW POLICIES
# ============================================================================

[mpsc_channels.overflow_policy]
# Backpressure behavior when channels reach capacity
log_warning_threshold = 0.8  # Log warning when channel 80% full
drop_policy = "block"         # Options: "block", "drop_oldest", "drop_newest"

[mpsc_channels.overflow_policy.metrics]
# Channel saturation monitoring
enabled = true
saturation_check_interval_seconds = 10
