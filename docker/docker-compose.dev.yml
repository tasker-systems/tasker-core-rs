# =============================================================================
# Docker Compose for Tasker Development Environment
# =============================================================================
# This orchestrates a complete development environment with:
# 1. PostgreSQL database with PGMQ extension (development optimized)
# 2. Tasker orchestration service (development build with debugging)
# 3. Comprehensive Rust worker (development build with debugging)
#
# Built for local development with fast builds and debugging capabilities
# Usage: cd docker && docker-compose -f docker-compose.dev.yml up --build

# version: '3.8' # Removed - obsolete in newer Docker Compose

services:
  # ==========================================================================
  # Builder Base - Common Rust dependencies with cargo-chef optimization
  # ==========================================================================
  builder-base:
    build:
      context: ..
      dockerfile: docker/build/Dockerfile
      target: builder
    image: jcoletaylor/tasker-builder-base:latest
    container_name: tasker-builder-base-dev
    profiles:
      - build

  # ==========================================================================
  # Database Service - PostgreSQL with PGMQ extension (development)
  # ==========================================================================
  postgres:
    build:
      context: .
      dockerfile: db/Dockerfile
    container_name: tasker-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: tasker_development
      POSTGRES_USER: tasker
      POSTGRES_PASSWORD: tasker
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    ports:
      - "5432:5432"
    volumes:
      # Custom initialization script for PGMQ and schema
      - ./scripts/postgres-init-development.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      # Persistent data volume for development
      - postgres_dev_data:/var/lib/postgresql/data
      # Development configuration (less strict)
      - ./scripts/postgres-dev.conf:/etc/postgresql/postgresql.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tasker -d tasker_development"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - tasker-dev-network

  # ==========================================================================
  # Orchestration Service - Development build with debugging
  # ==========================================================================
  orchestration:
    build:
      context: ..
      dockerfile: docker/dev/orchestration/Dockerfile
      target: dev-runtime
    container_name: tasker-orchestration-dev
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      builder-base:
        condition: service_completed_successfully
    environment:
      # Core configuration
      DATABASE_URL: postgresql://tasker:tasker@postgres:5432/tasker_development
      TASKER_ENV: development
      WORKSPACE_PATH: /app
      TASKER_CONFIG_ROOT: /app/config
    ports:
      - "8080:8080"
      - "6669:6669" # Tokio console port for debugging
    healthcheck:
      test: ["CMD", "/app/debug/health-check.sh"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - tasker-dev-network
    volumes:
      # Mount logs for debugging
      - ../logs/orchestration-dev:/app/logs
      # Mount config for hot-reloading during development
      - ../config:/app/config:ro

  # ==========================================================================
  # Worker Service - Development build with debugging
  # ==========================================================================
  worker:
    build:
      context: ..
      dockerfile: docker/dev/workers/rust/Dockerfile
      target: dev-runtime
    container_name: tasker-worker-rust-dev
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      orchestration:
        condition: service_healthy
      builder-base:
        condition: service_completed_successfully
    environment:
      # Core configuration
      DATABASE_URL: postgresql://tasker:tasker@postgres:5432/tasker_development
      TASKER_ENV: development
      WORKSPACE_PATH: /app
      TASKER_CONFIG_ROOT: /app/config
    ports:
      - "8081:8081"
      - "6670:6669" # Tokio console port for debugging (different port)
    healthcheck:
      test: ["CMD", "/app/debug/worker-status.sh"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - tasker-dev-network
    volumes:
      # Mount logs for debugging
      - ../logs/worker-dev:/app/logs
      # Mount config for hot-reloading during development
      - ../config:/app/config:ro

  # ==========================================================================
  # Optional Multi-Language Workers (comment out as needed)
  # ==========================================================================

  # Ruby Worker - Development
  # ruby-worker:
  #   build:
  #     context: .
  #     dockerfile: docker/deploy/workers/ruby/Dockerfile
  #   container_name: tasker-ruby-worker-dev
  #   restart: unless-stopped
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     orchestration:
  #       condition: service_healthy
  #   environment:
  #     DATABASE_URL: postgresql://tasker:tasker@postgres:5432/tasker_development
  #     TASKER_ENV: development
  #     WORKSPACE_PATH: /app
  #     TASKER_CONFIG_ROOT: /app/config
  #   ports:
  #     - "8082:8082"
  #   networks:
  #     - tasker-dev-network

  # Python Worker - Development
  # python-worker:
  #   build:
  #     context: .
  #     dockerfile: docker/deploy/workers/python/Dockerfile
  #   container_name: tasker-python-worker-dev
  #   restart: unless-stopped
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     orchestration:
  #       condition: service_healthy
  #   environment:
  #     DATABASE_URL: postgresql://tasker:tasker@postgres:5432/tasker_development
  #     TASKER_ENV: development
  #     WORKSPACE_PATH: /app
  #     TASKER_CONFIG_ROOT: /app/config
  #   ports:
  #     - "8083:8083"
  #   networks:
  #     - tasker-dev-network

  # WASM Worker - Development
  # wasm-worker:
  #   build:
  #     context: .
  #     dockerfile: docker/deploy/workers/wasm/Dockerfile
  #   container_name: tasker-wasm-worker-dev
  #   restart: unless-stopped
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     orchestration:
  #       condition: service_healthy
  #   environment:
  #     DATABASE_URL: postgresql://tasker:tasker@postgres:5432/tasker_development
  #     TASKER_ENV: development
  #     WORKSPACE_PATH: /app
  #     TASKER_CONFIG_ROOT: /app/config
  #   networks:
  #     - tasker-dev-network

# =============================================================================
# Network Configuration
# =============================================================================
networks:
  tasker-dev-network:
    name: tasker-development-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# =============================================================================
# Volume Configuration
# =============================================================================
volumes:
  postgres_dev_data:
    name: tasker-dev-postgres-data
    driver: local
# =============================================================================
# Development Profiles
# =============================================================================
# Use profiles to control which services run:
# docker-compose -f docker-compose.dev.yml --profile build up --build
