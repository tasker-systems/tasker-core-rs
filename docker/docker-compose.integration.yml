# =============================================================================
# Docker Compose for Tasker Integration Testing
# =============================================================================
# This orchestrates a complete three-service environment for integration testing:
# 1. PostgreSQL database with PGMQ extension
# 2. Tasker orchestration service (test-optimized)
# 3. Comprehensive Rust worker (all namespaces)
#
# Built for TAS-41 Docker-based integration testing
# Usage: cd docker && docker-compose -f docker-compose.integration.yml up --build

# version: '3.8' # Removed - obsolete in newer Docker Compose

services:
  # ==========================================================================
  # Builder Base - Common Rust dependencies with cargo-chef optimization
  # ==========================================================================
  builder-base:
    build:
      context: ..
      dockerfile: docker/build/Dockerfile
      target: builder
    image: jcoletaylor/tasker-builder-base:latest
    container_name: tasker-builder-base
    profiles:
      - build

  # ==========================================================================
  # Database Service - PostgreSQL with PGMQ extension
  # ==========================================================================
  postgres:
    build:
      context: .
      dockerfile: db/Dockerfile
    image: jcoletaylor/tasker-pgmq:latest
    container_name: tasker-postgres-integration
    restart: unless-stopped
    environment:
      POSTGRES_DB: tasker_integration
      POSTGRES_USER: tasker
      POSTGRES_PASSWORD: tasker
      POSTGRES_INITDB_ARGS: "--auth-host=trust"
    ports:
      - "5432:5432"
    volumes:
      # Custom initialization script for PGMQ and schema
      - ./scripts/postgres-init-integration.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      # Persistent data volume for development
      - postgres_data:/var/lib/postgresql/data
      # Performance tuning for integration tests
      - ./scripts/postgres.conf:/etc/postgresql/postgresql.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tasker -d tasker_integration"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - tasker-network

  # ==========================================================================
  # Orchestration Service - Tasker orchestration with web API
  # ==========================================================================
  orchestration:
    build:
      context: ..
      dockerfile: docker/dev/orchestration/Dockerfile
      target: dev-runtime
    container_name: tasker-orchestration-integration
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Core configuration (cleaned up to only essential variables)
      DATABASE_URL: postgresql://tasker:tasker@postgres:5432/tasker_integration
      TASKER_ENV: test
      WORKSPACE_PATH: /app
      TASKER_CONFIG_ROOT: /app/config
      LOG_LEVEL: info
      RUST_LOG: info
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 45s
    networks:
      - tasker-network
    volumes:
      # Mount logs for debugging
      - ../logs/orchestration:/app/logs

  # ==========================================================================
  # Worker Service - Comprehensive Rust worker (all namespaces)
  # ==========================================================================
  worker:
    build:
      context: ..
      dockerfile: docker/dev/workers/rust/Dockerfile
      target: dev-runtime
    container_name: tasker-worker-rust-integration
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      orchestration:
        condition: service_healthy
    environment:
      # Core configuration (cleaned up to only essential variables)
      DATABASE_URL: postgresql://tasker:tasker@postgres:5432/tasker_integration
      TASKER_ENV: test
      WORKSPACE_PATH: /app
      TASKER_CONFIG_ROOT: /app/config
      LOG_LEVEL: info
      RUST_LOG: info
    ports:
      - "8081:8081"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - tasker-network
    volumes:
      # Mount logs for debugging
      - ../logs/worker:/app/logs

# =============================================================================
# Network Configuration
# =============================================================================
networks:
  tasker-network:
    name: tasker-integration-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volume Configuration
# =============================================================================
volumes:
  postgres_data:
    name: tasker-integration-postgres-data
    driver: local
# =============================================================================
# Development and Testing Profiles
# =============================================================================
# Additional compose configurations can be layered:
# - docker-compose -f docker-compose.integration.yml -f docker-compose.dev.yml up
# - docker-compose -f docker-compose.integration.yml -f docker-compose.ci.yml up
