# TaskTemplate Configuration - Ruby Implementation
#
# Linear Workflow Pattern with Ruby Step Handlers via FFI
# Demonstrates sequential mathematical operations using Ruby handlers called from Rust
#
# Template: linear_workflow/mathematical_sequence:1.0.0
# Implementation: Ruby FFI with tasker-worker-rb
# Updated: 2025-09-24 (Fixed Template Format)
#
# Mathematical Pattern:
# 1. Step 1: Square the initial even number (6 → 36)
# 2. Step 2: Add constant to squared result (36 + 10 = 46)
# 3. Step 3: Multiply by factor (46 × 3 = 138)
# 4. Step 4: Divide for final result (138 ÷ 2 = 69)
#
---
name: mathematical_sequence
namespace_name: linear_workflow
version: 1.0.0
description: "Sequential mathematical operations: input → square → add → multiply → divide"
metadata:
  author: Ruby FFI Implementation
  tags:
    - namespace:linear_workflow
    - pattern:linear
    - dependencies:simple
    - implementation:ruby_ffi
    - language:ruby
    - type_safety:runtime
  documentation_url:
  created_at: "2025-09-24T00:00:00Z"
  updated_at: "2025-09-24T00:00:00Z"
  notes: "Ruby FFI implementation with sequential mathematical operations"
task_handler:
  callable: LinearWorkflow::LinearWorkflowHandler
  initialization:
    input_validation:
      required_fields:
        - even_number
      even_number_constraint: must_be_even
      value_range:
        min: 2
        max: 100
    expected_results:
      linear_step_1: "input²"
      linear_step_2: "(input² + 10)"
      linear_step_3: "(input² + 10) × 3"
      linear_step_4: "((input² + 10) × 3) ÷ 2"
system_dependencies:
  primary: default
  secondary: []
domain_events: []
input_schema:
  type: object
  required:
    - even_number
  properties:
    even_number:
      type: integer
      minimum: 2
      maximum: 100
      description: "Even number for mathematical sequence"
steps:
  - name: linear_step_1
    description: "Square the initial even number (Step 1: n → n²)"
    handler:
      callable: LinearWorkflow::StepHandlers::LinearStep1Handler
      initialization:
        operation: square
        step_number: 1
        description: "Square the input number (n²)"
    system_dependency:
    dependencies: []
    retry:
      retryable: true
      max_attempts: 3
      backoff: exponential
      backoff_base_ms: 1000
      max_backoff_ms: 30000
    timeout_seconds: 30
    publishes_events: []
  - name: linear_step_2
    description: "Add constant to squared result (Step 2: n² → n² + 10)"
    handler:
      callable: LinearWorkflow::StepHandlers::LinearStep2Handler
      initialization:
        operation: add
        constant: 10
        step_number: 2
        description: "Add 10 to the squared result"
    system_dependency:
    dependencies:
      - linear_step_1
    retry:
      retryable: true
      max_attempts: 3
      backoff: exponential
      backoff_base_ms: 1000
      max_backoff_ms: 30000
    timeout_seconds: 30
    publishes_events: []
  - name: linear_step_3
    description: "Multiply by factor (Step 3: (n² + 10) → (n² + 10) × 3)"
    handler:
      callable: LinearWorkflow::StepHandlers::LinearStep3Handler
      initialization:
        operation: multiply
        factor: 3
        step_number: 3
        description: "Multiply by 3"
    system_dependency:
    dependencies:
      - linear_step_2
    retry:
      retryable: true
      max_attempts: 3
      backoff: exponential
      backoff_base_ms: 1000
      max_backoff_ms: 30000
    timeout_seconds: 30
    publishes_events: []
  - name: linear_step_4
    description: "Divide for final result (Step 4: ((n² + 10) × 3) → ((n² + 10) × 3) ÷ 2)"
    handler:
      callable: LinearWorkflow::StepHandlers::LinearStep4Handler
      initialization:
        operation: divide
        divisor: 2
        step_number: 4
        description: "Divide by 2 for final result"
    system_dependency:
    dependencies:
      - linear_step_3
    retry:
      retryable: true
      max_attempts: 3
      backoff: exponential
      backoff_base_ms: 1000
      max_backoff_ms: 30000
    timeout_seconds: 30
    publishes_events: []
environments:
  test:
    steps:
      - name: linear_step_1
        timeout_seconds: 10
        retry:
          max_attempts: 2
      - name: linear_step_2
        timeout_seconds: 10
        retry:
          max_attempts: 2
      - name: linear_step_3
        timeout_seconds: 10
        retry:
          max_attempts: 2
      - name: linear_step_4
        timeout_seconds: 10
        retry:
          max_attempts: 2
