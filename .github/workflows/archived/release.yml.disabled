name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-22.04
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Tasker Core Rust v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}
          body: |
            # Tasker Core Rust v${{ steps.get_version.outputs.version }}
            
            High-performance Rust implementation of the Tasker workflow orchestration engine.
            
            ## Installation
            
            Add to your `Cargo.toml`:
            ```toml
            [dependencies]
            tasker-core = "${{ steps.get_version.outputs.version }}"
            ```
            
            ## What's Changed
            
            See the [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.
            
            ## Platform Support
            
            This release includes pre-built binaries for:
            - Linux (x86_64)
            - macOS (x86_64 and ARM64)
            - Windows (x86_64)
            
            ## FFI Bindings
            
            Multi-language support available for:
            - Ruby (via Magnus)
            - Python (via PyO3) 
            - JavaScript/TypeScript (via NAPI and WASM)

  build-and-upload:
    name: Build and Upload (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    needs: create-release
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
            artifact_name: tasker-core-linux-x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_name: tasker-core-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: tasker-core-macos-arm64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: tasker-core-windows-x86_64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: release-${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }} --features release

      - name: Create artifact directory
        run: mkdir artifacts

      - name: Copy binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/tasker-core artifacts/${{ matrix.artifact_name }}
          chmod +x artifacts/${{ matrix.artifact_name }}

      - name: Copy binary (Windows)
        if: matrix.os == 'windows-latest'
        run: copy target\${{ matrix.target }}\release\tasker-core.exe artifacts\${{ matrix.artifact_name }}.exe

      - name: Create tarball (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd artifacts
          tar czf ${{ matrix.artifact_name }}.tar.gz ${{ matrix.artifact_name }}

      - name: Create zip (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd artifacts
          7z a ${{ matrix.artifact_name }}.zip ${{ matrix.artifact_name }}.exe

      - name: Upload Release Asset (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: artifacts/${{ matrix.artifact_name }}.tar.gz
          asset_name: ${{ matrix.artifact_name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Asset (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: artifacts/${{ matrix.artifact_name }}.zip
          asset_name: ${{ matrix.artifact_name }}.zip
          asset_content_type: application/zip

  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-22.04
    needs: [create-release, build-and-upload]
    if: "!contains(needs.create-release.outputs.version, '-')"  # Only for stable releases
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-22.04
    needs: create-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Generate documentation
        run: cargo doc --no-deps --all-features

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: target/doc
          destination_dir: docs/v${{ needs.create-release.outputs.version }}

  notify-completion:
    name: Notify Release Completion
    runs-on: ubuntu-22.04
    needs: [create-release, build-and-upload, publish-crate, update-documentation]
    if: always()
    
    steps:
      - name: Check release status
        run: |
          echo "Release v${{ needs.create-release.outputs.version }} completed!"
          echo "Build status: ${{ needs.build-and-upload.result }}"
          echo "Publish status: ${{ needs.publish-crate.result }}"
          echo "Documentation status: ${{ needs.update-documentation.result }}"