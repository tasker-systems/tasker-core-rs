name: Integration Tests

on:
  workflow_call:
    inputs:
      postgres-image:
        required: true
        type: string
      use-docker:
        description: 'Force Docker execution (overrides PR label check)'
        required: false
        type: boolean
        default: false

jobs:
  # Job 1: Build once, shared by both execution modes
  build-and-unit-tests:
    name: Build + Unit Tests
    runs-on: ubuntu-22.04
    timeout-minutes: 15

    services:
      postgres:
        image: ${{ inputs.postgres-image }}
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: tasker
          POSTGRES_PASSWORD: tasker
          POSTGRES_DB: tasker_rust_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Ruby for FFI extension
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4'
          bundler-cache: true
          working-directory: workers/ruby

      - name: Cache Rust build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-integration-
            ${{ runner.os }}-cargo-

      - name: Setup shared environment variables
        uses: ./.github/actions/setup-env

      - name: Install tools
        uses: ./.github/actions/install-tools
        with:
          tools: "nextest sqlx-cli"

      - name: Setup database
        run: sqlx migrate run
        env:
          DATABASE_URL: postgresql://tasker:tasker@localhost:5432/tasker_rust_test

      - name: Build all packages
        run: |
          echo "üî® Building all packages with full features..."
          cargo build --all-features --workspace --bins
          echo "üì¶ Verifying binaries were created..."
          ls -lh target/debug/tasker-server target/debug/tasker-worker target/debug/tasker-cli
        env:
          DATABASE_URL: postgresql://tasker:tasker@localhost:5432/tasker_rust_test

      - name: Build Ruby FFI extension
        run: |
          cd workers/ruby
          bundle install
          bundle exec rake compile

      - name: Run unit tests
        run: |
          echo "üß™ Running unit tests (with postgres service)..."
          mkdir -p target/nextest/ci
          cargo nextest run \
            --profile ci \
            --lib \
            --package tasker-shared \
            --package tasker-orchestration \
            --package tasker-worker \
            --package pgmq-notify \
            --package tasker-client \
            --no-fail-fast
        env:
          DATABASE_URL: postgresql://tasker:tasker@localhost:5432/tasker_rust_test

      - name: Run doctests
        run: |
          echo "üìö Running documentation tests..."
          cargo test --doc \
            --package tasker-shared \
            --package tasker-orchestration \
            --package tasker-worker \
            --package pgmq-notify \
            --package tasker-client
        env:
          DATABASE_URL: postgresql://tasker:tasker@localhost:5432/tasker_rust_test

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('target/nextest/ci/junit.xml') != ''
        with:
          name: unit-test-results
          path: target/nextest/ci/junit.xml

      - name: Verify artifacts before upload
        run: |
          echo "üìã Files to be uploaded:"
          ls -lh target/debug/tasker-server target/debug/tasker-worker target/debug/tasker-cli || echo "‚ùå Binaries missing!"
          ls -lh workers/ruby/lib/tasker_core/*.{bundle,so} 2>/dev/null || echo "‚ÑπÔ∏è  Ruby extensions not found (expected on some platforms)"

      - name: Upload build artifacts for native execution
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            target/debug/tasker-server
            target/debug/tasker-worker
            target/debug/tasker-cli
            workers/ruby/lib/tasker_core/tasker_worker_rb.bundle
            workers/ruby/lib/tasker_core/tasker_worker_rb.so
          retention-days: 1
          if-no-files-found: error

  # Job 2a: Native binary execution (default)
  integration-tests-native:
    name: Integration Tests (Native Binaries)
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    needs: build-and-unit-tests
    # Run if: no "run-docker" label AND not forced to use Docker
    if: |
      !contains(github.event.pull_request.labels.*.name, 'run-docker') &&
      !inputs.use-docker

    services:
      postgres:
        image: ${{ inputs.postgres-image }}
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: tasker
          POSTGRES_PASSWORD: tasker
          POSTGRES_DB: tasker_rust_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Restore Rust build cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-integration-
            ${{ runner.os }}-cargo-

      - name: Setup shared environment variables
        uses: ./.github/actions/setup-env

      - name: Setup Ruby for FFI worker
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4'
          bundler-cache: true
          working-directory: workers/ruby

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: artifacts

      - name: Restore artifacts to correct locations
        run: |
          echo "üì¶ Restoring build artifacts..."
          echo "Contents of artifacts directory:"
          ls -laR artifacts/ || echo "artifacts/ directory not found"

          mkdir -p target/debug
          mkdir -p workers/ruby/lib/tasker_core

          # Move binaries to target/debug
          if [ -f artifacts/tasker-server ]; then
            mv artifacts/tasker-server target/debug/
            echo "‚úÖ tasker-server restored"
          else
            echo "‚ùå tasker-server not found in artifacts/"
          fi

          if [ -f artifacts/tasker-worker ]; then
            mv artifacts/tasker-worker target/debug/
            echo "‚úÖ tasker-worker restored"
          else
            echo "‚ùå tasker-worker not found in artifacts/"
          fi

          if [ -f artifacts/tasker-cli ]; then
            mv artifacts/tasker-cli target/debug/
            echo "‚úÖ tasker-cli restored"
          else
            echo "‚ùå tasker-cli not found in artifacts/"
          fi

          # Move Ruby extension files
          mv artifacts/*.bundle workers/ruby/lib/tasker_core/ 2>/dev/null && echo "‚úÖ bundle restored" || echo "‚ÑπÔ∏è  No bundle files"
          mv artifacts/*.so workers/ruby/lib/tasker_core/ 2>/dev/null && echo "‚úÖ .so restored" || echo "‚ÑπÔ∏è  No .so files"

          echo ""
          echo "Final state:"
          ls -lh target/debug/ || echo "target/debug/ is empty"
          ls -lh workers/ruby/lib/tasker_core/ || echo "Ruby extension dir is empty"

      - name: Make binaries executable
        run: chmod +x target/debug/tasker-server target/debug/tasker-worker target/debug/tasker-cli

      - name: Install tools
        uses: ./.github/actions/install-tools
        with:
          tools: "nextest sqlx-cli"

      - name: Run database migrations
        run: sqlx migrate run
        env:
          DATABASE_URL: postgresql://tasker:tasker@localhost:5432/tasker_rust_test

      - name: Generate test configuration
        run: |
          mkdir -p config/tasker
          echo "üîß Generating orchestration configuration..."
          cargo run --package tasker-client --bin tasker-cli -- config generate \
            --context orchestration \
            --environment test \
            --output config/tasker/orchestration-test.toml
          echo "üîß Generating worker configuration..."
          cargo run --package tasker-client --bin tasker-cli -- config generate \
            --context worker \
            --environment test \
            --output config/tasker/worker-test.toml
        env:
          DATABASE_URL: postgresql://tasker:tasker@localhost:5432/tasker_rust_test

      - name: Start native services
        run: |
          mkdir -p .pids
          chmod +x .github/scripts/start-native-services.sh
          .github/scripts/start-native-services.sh
        env:
          DATABASE_URL: postgresql://tasker:tasker@localhost:5432/tasker_rust_test

      - name: Run integration tests
        run: |
          echo "üèÅ Running integration and E2E tests with native binaries..."
          mkdir -p target/nextest/ci
          cargo nextest run \
            --profile ci \
            --package tasker-shared \
            --package tasker-orchestration \
            --package tasker-worker \
            --package tasker-client \
            --package tasker-core \
            --test '*' \
            --no-fail-fast
        env:
          DATABASE_URL: postgresql://tasker:tasker@localhost:5432/tasker_rust_test
          TASKER_TEST_ORCHESTRATION_URL: http://localhost:8080
          TASKER_TEST_WORKER_URL: http://localhost:8081
          TASKER_TEST_RUBY_WORKER_URL: http://localhost:8082
          RUST_LOG: info

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('target/nextest/ci/junit.xml') != ''
        with:
          name: integration-test-results-native
          path: target/nextest/ci/junit.xml

      - name: Collect service logs on failure
        if: failure()
        run: |
          mkdir -p native-logs
          [ -f orchestration.log ] && cp orchestration.log native-logs/
          [ -f worker.log ] && cp worker.log native-logs/
          [ -f ruby-worker.log ] && cp ruby-worker.log native-logs/

      - name: Upload service logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: native-service-logs
          path: native-logs/

      - name: Stop native services
        if: always()
        run: |
          chmod +x .github/scripts/stop-native-services.sh
          .github/scripts/stop-native-services.sh

  # Job 2b: Docker execution (conditional)
  integration-tests-docker:
    name: Integration Tests (Docker - Production-Like)
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    needs: build-and-unit-tests
    # Run if: "run-docker" label OR forced to use Docker
    if: |
      contains(github.event.pull_request.labels.*.name, 'run-docker') ||
      inputs.use-docker

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Restore Rust build cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-integration-
            ${{ runner.os }}-cargo-

      - name: Setup shared environment variables
        uses: ./.github/actions/setup-env

      - name: Install tools
        uses: ./.github/actions/install-tools
        with:
          tools: "nextest"

      - name: Free up disk space
        run: |
          echo "üßπ Freeing up disk space before Docker builds..."
          docker system prune -af --volumes
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Build and start Docker services
        run: |
          echo "üê≥ Building and starting Docker services..."
          echo "   Note: Using cached Rust compilation from build job!"
          docker compose -f docker/docker-compose.test.yml up --build -d
          echo "‚úÖ All services started"

      - name: Wait for services with health checks
        run: |
          timeout 180 bash -c '
            echo "üöÄ Starting service health checks..."

            # Fast check for orchestration service
            until curl -f http://localhost:8080/health 2>/dev/null; do
              echo "‚è≥ Waiting for orchestration service..."
              sleep 2
            done
            echo "‚úÖ Orchestration service ready"

            # Fast check for Rust worker
            until curl -f http://localhost:8081/health 2>/dev/null; do
              echo "‚è≥ Waiting for Rust worker service..."
              sleep 2
            done
            echo "‚úÖ Rust worker ready"

            # Extended check for Ruby worker (FFI bootstrap takes time)
            echo "‚è≥ Waiting for Ruby worker (FFI bootstrap may take 30-60 seconds)..."
            until curl -f http://localhost:8082/health 2>/dev/null; do
              echo "‚è≥ Ruby worker still bootstrapping FFI..."
              sleep 5
            done
            echo "‚úÖ Ruby worker ready with FFI"

            echo "üéâ All services ready for E2E testing!"
          '

      - name: Validate handler discovery
        run: |
          echo "üîç Validating handler discovery across all workers..."

          # Check Rust worker handlers
          rust_handler_count=$(curl -s http://localhost:8081/worker/handlers 2>/dev/null | jq 'length' 2>/dev/null || echo "0")
          echo "‚úÖ Rust worker handlers: $rust_handler_count"

          # Check Ruby worker handlers
          ruby_handler_count=$(curl -s http://localhost:8082/worker/handlers 2>/dev/null | jq 'length' 2>/dev/null || echo "0")
          echo "‚úÖ Ruby worker handlers: $ruby_handler_count"

          # Verify handlers discovered
          if [ "$ruby_handler_count" -eq "0" ]; then
            echo "‚ö†Ô∏è Warning: No Ruby handlers discovered"
          fi

      - name: Run integration and E2E tests
        run: |
          echo "üèÅ Running integration and E2E tests with Docker..."
          mkdir -p target/nextest/ci
          cargo nextest run \
            --profile ci \
            --package tasker-shared \
            --package tasker-orchestration \
            --package tasker-worker \
            --package tasker-client \
            --package tasker-core \
            --test '*' \
            --no-fail-fast
        env:
          DATABASE_URL: postgresql://tasker:tasker@localhost:5432/tasker_rust_test
          TASKER_TEST_ORCHESTRATION_URL: http://localhost:8080
          TASKER_TEST_WORKER_URL: http://localhost:8081
          TASKER_TEST_RUBY_WORKER_URL: http://localhost:8082
          RUST_LOG: info

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('target/nextest/ci/junit.xml') != ''
        with:
          name: integration-test-results-docker
          path: target/nextest/ci/junit.xml

      - name: Collect service logs on failure
        if: failure()
        run: |
          echo "üìã Collecting service logs for debugging..."
          mkdir -p docker-logs
          docker compose -f docker/docker-compose.test.yml logs postgres > docker-logs/postgres.log
          docker compose -f docker/docker-compose.test.yml logs orchestration > docker-logs/orchestration.log
          docker compose -f docker/docker-compose.test.yml logs worker > docker-logs/rust-worker.log
          docker compose -f docker/docker-compose.test.yml logs ruby-worker > docker-logs/ruby-worker.log

      - name: Upload service logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: docker-service-logs
          path: docker-logs/

      - name: Shutdown services
        if: always()
        run: docker compose -f docker/docker-compose.test.yml down -v
