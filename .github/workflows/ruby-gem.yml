name: Ruby Gem Build and Test

on:
  push:
    branches: [ main ]
    paths:
      - 'bindings/ruby/**'
      - 'src/**'
      - 'Cargo.toml'
      - '.github/workflows/ruby-gem.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'bindings/ruby/**'
      - 'src/**'
      - 'Cargo.toml'
      - '.github/workflows/ruby-gem.yml'

defaults:
  run:
    working-directory: bindings/ruby

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04] # macos-latest soon
        ruby: ['3.2'] # 3.4 soon

    runs-on: ${{ matrix.os }}

    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: tasker
          POSTGRES_PASSWORD: tasker
          POSTGRES_DB: tasker_rust_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - "5432:5432"

    env:
      DATABASE_URL: postgresql://tasker:tasker@localhost:5432/tasker_rust_test
      TASKER_ENV: test
      RAILS_ENV: test
      APP_ENV: test
      RACK_ENV: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ruby-gem-${{ matrix.os }}-${{ matrix.ruby }}
        workspaces: |
          . -> target
          bindings/ruby -> target

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby }}
        bundler-cache: true
        working-directory: bindings/ruby

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install postgresql

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U tasker; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        echo "PostgreSQL is ready"

    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Install SQLx CLI
      run: cargo install sqlx-cli --no-default-features --features rustls,postgres

    - name: Set up database
      run: |
        until pg_isready -h localhost -p 5432 -U tasker_rust_test; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        cd ../..
        sqlx migrate run
        cd bindings/ruby
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        TASKER_ENV: test
        RAILS_ENV: test

    - name: Build Ruby extension
      run: |
        bundle exec rake compile
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        TASKER_ENV: test
        RAILS_ENV: test

    - name: Check Rust formatting
      run: |
        cargo fmt --check
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        TASKER_ENV: test
        RAILS_ENV: test

    - name: Run Rust clippy
      run: |
        cargo clippy --workspace --all-targets --all-features -- -D warnings
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        TASKER_ENV: test
        RAILS_ENV: test

    - name: Run Ruby tests
      run: |
        bundle exec rspec
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        TASKER_ENV: test
        RAILS_ENV: test


  # Security audit
  # security:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Install Rust toolchain
  #     uses: dtolnay/rust-toolchain@stable

  #   - name: Cache Rust dependencies
  #     uses: Swatinem/rust-cache@v2
  #     with:
  #       key: security-audit

  #   - name: Security audit
  #     run: |
  #       cargo install cargo-audit
  #       cargo audit

  #   - name: Set up Ruby
  #     uses: ruby/setup-ruby@v1
  #     with:
  #       ruby-version: '3.2'
  #       bundler-cache: true
  #       working-directory: bindings/ruby

  #   - name: Check for known vulnerabilities in Ruby dependencies
  #     run: |
  #       gem install bundler-audit
  #       bundle audit check --update
  #     working-directory: bindings/ruby
