# Comprehensive CI/CD Pipeline for Tasker Core Rust
# Based on Rust best practices and Rails engine patterns
name: "Tasker Core Rust CI"

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Code Quality and Linting
  quality:
    name: Code Quality
    runs-on: ubuntu-22.04

    services:
      postgres:
        image: ghcr.io/pgmq/pg17-pgmq:v1.5.1
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: tasker_core_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: tasker_core_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgres://tasker_core_test:test_password@localhost:5432/tasker_core_test
      TASKER_ENV: test
      LOG_LEVEL: info
      RUST_LOG: info

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: quality

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Install SQLx CLI
        run: cargo install sqlx-cli --no-default-features --features rustls,postgres

      - name: Set up database
        run: |
          until pg_isready -h localhost -p 5432 -U tasker_core_test; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          sqlx migrate run

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy lints
        env:
          DATABASE_URL: postgres://tasker_core_test:test_password@localhost:5432/tasker_core_test
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check documentation
        env:
          DATABASE_URL: postgres://tasker_core_test:test_password@localhost:5432/tasker_core_test
          TASKER_ENV: test
          LOG_LEVEL: info
          RUST_LOG: info
        run: cargo doc --no-deps --document-private-items

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  # Build and test on Ubuntu (production target)
  test:
    name: Test (Rust ${{ matrix.rust-version }})
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false
      matrix:
        rust-version: ["stable", "beta"]

    services:
      postgres:
        image: ghcr.io/pgmq/pg17-pgmq:v1.5.1
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: tasker_core_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: tasker_core_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgres://tasker_core_test:test_password@localhost:5432/tasker_core_test
      TASKER_ENV: test
      LOG_LEVEL: info
      RUST_LOG: info

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust-version }}

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: test-${{ matrix.rust-version }}

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Set up database
        run: |
          # Wait for PostgreSQL to be ready
          until pg_isready -h localhost -p 5432 -U tasker_core_test; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Install SQLx CLI
        run: cargo install sqlx-cli --no-default-features --features rustls,postgres

      - name: Run database migrations
        run: sqlx migrate run

      - name: Build project
        env:
          DATABASE_URL: postgres://tasker_core_test:test_password@localhost:5432/tasker_core_test
          TASKER_ENV: test
          LOG_LEVEL: info
          RUST_LOG: info
        run: cargo build --verbose --all-features

      - name: Run lib tests
        env:
          DATABASE_URL: postgres://tasker_core_test:test_password@localhost:5432/tasker_core_test
          TASKER_ENV: test
          LOG_LEVEL: info
          RUST_LOG: info
        run: cargo test --lib --verbose --all-features

      - name: Run integration tests
        env:
          DATABASE_URL: postgres://tasker_core_test:test_password@localhost:5432/tasker_core_test
          TASKER_ENV: test
          LOG_LEVEL: info
          RUST_LOG: info
        run: cargo test --test '*' --verbose --all-features

      - name: Run doctests
        run: cargo test --doc --verbose

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.rust-version }}
          path: target/debug/deps/

  # Performance benchmarks
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-22.04
    if: github.event_name == 'pull_request'

    services:
      postgres:
        image: ghcr.io/pgmq/pg17-pgmq:v1.5.1
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: tasker_core_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: tasker_core_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgres://tasker_core_test:test_password@localhost:5432/tasker_core_test
      TASKER_ENV: test
      LOG_LEVEL: info
      RUST_LOG: info

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: benchmark

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Install SQLx CLI
        run: cargo install sqlx-cli --no-default-features --features rustls,postgres

      - name: Set up database
        run: |
          until pg_isready -h localhost -p 5432 -U tasker_core_test; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          sqlx migrate run

      - name: Run benchmarks
        run: cargo bench --verbose

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: target/criterion/

  # Example validation (similar to Rails template validation)
  validate-examples:
    name: Validate Examples and Demos
    runs-on: ubuntu-22.04

    services:
      postgres:
        image: ghcr.io/pgmq/pg17-pgmq:v1.5.1
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: tasker_core_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: tasker_core_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgres://tasker_core_test:test_password@localhost:5432/tasker_core_test
      TASKER_ENV: test
      LOG_LEVEL: info
      RUST_LOG: info

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: examples

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Install SQLx CLI
        run: cargo install sqlx-cli --no-default-features --features rustls,postgres

      - name: Set up database
        run: |
          until pg_isready -h localhost -p 5432 -U tasker_core_test; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          sqlx migrate run

      - name: Validate SQL Functions Demo
        run: |
          echo "🗄️ Running SQL functions demonstration..."
          cargo run --example sql_functions_demo

      - name: Validate Configuration Demo
        run: |
          echo "📋 Running configuration demonstration..."
          cargo run --example config_demo

      - name: Validate Error Classification Demo
        run: |
          echo "⚠️ Running error classification demonstration..."
          cargo run --example error_classification_demo

      - name: Validate Unified Logging Demo
        run: |
          echo "📝 Running unified logging demonstration..."
          cargo run --example unified_logging_demo

      - name: Build all examples
        run: |
          echo "🏗️ Building all examples..."
          cargo build --examples --verbose

  # Coverage reporting
  coverage:
    name: Code Coverage
    runs-on: ubuntu-22.04

    services:
      postgres:
        image: ghcr.io/pgmq/pg17-pgmq:v1.5.1
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: tasker_core_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: tasker_core_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgres://tasker_core_test:test_password@localhost:5432/tasker_core_test
      CARGO_INCREMENTAL: 0
      RUSTFLAGS: -Cinstrument-coverage
      LLVM_PROFILE_FILE: cargo-test-%p-%m.profraw
      TASKER_ENV: test
      LOG_LEVEL: info
      RUST_LOG: info

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: coverage

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Install SQLx CLI
        run: cargo install sqlx-cli --no-default-features --features rustls,postgres

      - name: Install cargo-llvm-cov
        run: cargo install cargo-llvm-cov

      - name: Set up database
        run: |
          until pg_isready -h localhost -p 5432 -U tasker_core_test; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          sqlx migrate run

      - name: Generate coverage report
        env:
          DATABASE_URL: postgres://tasker_core_test:test_password@localhost:5432/tasker_core_test
          TASKER_ENV: test
          LOG_LEVEL: info
          RUST_LOG: info
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          fail_ci_if_error: false

  # Ruby bindings test
  ruby-bindings:
    name: Ruby Bindings Test
    runs-on: ubuntu-22.04

    services:
      postgres:
        image: ghcr.io/pgmq/pg17-pgmq:v1.5.1
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: tasker
          POSTGRES_PASSWORD: tasker
          POSTGRES_DB: tasker_rust_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql://tasker:tasker@localhost:5432/tasker_rust_test
      TASKER_ENV: test
      RAILS_ENV: test
      LOG_LEVEL: info
      RUST_LOG: info

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ruby-bindings
          workspaces: |
            . -> target
            bindings/ruby -> target

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.4"
          bundler-cache: true
          working-directory: bindings/ruby

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev postgresql-client

      - name: Install SQLx CLI
        run: cargo install sqlx-cli --no-default-features --features rustls,postgres

      - name: Set up database
        run: |
          until pg_isready -h localhost -p 5432 -U tasker; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          sqlx migrate run

      - name: Build Ruby extension
        run: |
          cd bindings/ruby
          bundle exec rake compile

      - name: Run Ruby integration tests
        run: |
          cd bindings/ruby
          bundle exec rspec spec/integration/ --format documentation

  # Final status check
  ci-success:
    name: CI Success
    runs-on: ubuntu-22.04
    needs: [quality, security, test, validate-examples, ruby-bindings]
    if: always()

    steps:
      - name: Check all jobs
        run: |
          echo "Quality: ${{ needs.quality.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Validate Examples: ${{ needs.validate-examples.result }}"
          echo "Ruby Bindings: ${{ needs.ruby-bindings.result }}"

          if [[ "${{ needs.quality.result }}" != "success" ||
                "${{ needs.security.result }}" != "success" ||
                "${{ needs.test.result }}" != "success" ||
                "${{ needs.validate-examples.result }}" != "success" ||
                "${{ needs.ruby-bindings.result }}" != "success" ]]; then
            echo "❌ One or more required jobs failed"
            exit 1
          else
            echo "✅ All required jobs passed"
          fi
