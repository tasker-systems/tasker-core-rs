name: E2E Tests (All Workers)

on:
  workflow_call:
    inputs:
      postgres-image:
        required: true
        type: string

jobs:
  build-and-unit-tests:
    name: Build + Unit Tests
    runs-on: ubuntu-22.04
    timeout-minutes: 15

    services:
      postgres:
        image: ${{ inputs.postgres-image }}
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: tasker
          POSTGRES_PASSWORD: tasker
          POSTGRES_DB: tasker_rust_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-e2e-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-e2e-
            ${{ runner.os }}-cargo-

      - name: Setup shared environment variables
        uses: ./.github/actions/setup-env

      - name: Install tools
        uses: ./.github/actions/install-tools
        with:
          tools: "nextest sqlx-cli"

      - name: Setup database
        run: sqlx migrate run
        env:
          DATABASE_URL: postgresql://tasker:tasker@localhost:5432/tasker_rust_test

      - name: Build all packages
        run: |
          echo "🔨 Building all packages with full features..."
          cargo build --all-features --all-targets
        env:
          DATABASE_URL: postgresql://tasker:tasker@localhost:5432/tasker_rust_test

      - name: Run unit tests
        run: |
          echo "🧪 Running unit tests (with postgres service)..."
          mkdir -p target/nextest/ci

          cargo nextest run \
            --profile ci \
            --lib \
            --package tasker-shared \
            --package tasker-orchestration \
            --package tasker-worker \
            --package pgmq-notify \
            --package tasker-client \
            --no-fail-fast
        env:
          DATABASE_URL: postgresql://tasker:tasker@localhost:5432/tasker_rust_test

      - name: Run doctests
        run: |
          echo "📚 Running documentation tests..."
          cargo test --doc \
            --package tasker-shared \
            --package tasker-orchestration \
            --package tasker-worker \
            --package pgmq-notify \
            --package tasker-client
        env:
          DATABASE_URL: postgresql://tasker:tasker@localhost:5432/tasker_rust_test

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('target/nextest/ci/junit.xml') != ''
        with:
          name: unit-test-results
          path: target/nextest/ci/junit.xml

  integration-tests:
    name: Integration & E2E Tests (Rust + Ruby FFI Workers)
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    needs: build-and-unit-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Restore Rust build cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-e2e-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-e2e-
            ${{ runner.os }}-cargo-

      - name: Setup shared environment variables
        uses: ./.github/actions/setup-env

      - name: Install tools
        uses: ./.github/actions/install-tools
        with:
          tools: "nextest"

      - name: Free up disk space
        run: |
          echo "🧹 Freeing up disk space before Docker builds..."
          echo "📊 Disk usage before cleanup:"
          df -h

          # Remove unnecessary tools and packages
          docker system prune -af --volumes
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

          echo "📊 Disk usage after cleanup:"
          df -h

      - name: Build and start Docker services
        run: |
          echo "🐳 Building and starting Docker services..."
          echo "   Note: Rust compilation already cached from build job!"

          docker compose -f docker/docker-compose.test.yml up --build -d

          echo "✅ All services started"

      - name: Wait for services with health checks
        run: |
          timeout 180 bash -c '
            echo "🚀 Starting service health checks..."

            # Fast check for orchestration service
            until curl -f http://localhost:8080/health 2>/dev/null; do
              echo "⏳ Waiting for orchestration service..."
              sleep 2
            done
            echo "✅ Orchestration service ready"

            # Fast check for Rust worker
            until curl -f http://localhost:8081/health 2>/dev/null; do
              echo "⏳ Waiting for Rust worker service..."
              sleep 2
            done
            echo "✅ Rust worker ready"

            # Extended check for Ruby worker (FFI bootstrap takes time)
            echo "⏳ Waiting for Ruby worker (FFI bootstrap may take 30-60 seconds)..."
            until curl -f http://localhost:8082/health 2>/dev/null; do
              echo "⏳ Ruby worker still bootstrapping FFI..."
              sleep 5
            done
            echo "✅ Ruby worker ready with FFI"

            echo "🎉 All services ready for E2E testing!"
          '

      - name: Validate handler discovery
        run: |
          echo "🔍 Validating handler discovery across all workers..."

          # Check Rust worker handlers
          rust_handler_count=$(curl -s http://localhost:8081/worker/handlers 2>/dev/null | jq 'length' 2>/dev/null || echo "0")
          echo "✅ Rust worker handlers: $rust_handler_count"

          # Check Ruby worker handlers
          ruby_handler_count=$(curl -s http://localhost:8082/worker/handlers 2>/dev/null | jq 'length' 2>/dev/null || echo "0")
          echo "✅ Ruby worker handlers: $ruby_handler_count"

          # Verify handlers discovered
          if [ "$ruby_handler_count" -eq "0" ]; then
            echo "⚠️ Warning: No Ruby handlers discovered"
          fi

      - name: Run integration and E2E tests
        run: |
          echo "🏁 Running integration and E2E tests..."
          echo "   - Integration tests (lifecycle, SQL functions)"
          echo "   - E2E tests (Rust + Ruby workers)"
          echo "   Note: Unit tests already passed in build job!"

          # Ensure nextest output directory exists
          mkdir -p target/nextest/ci

          # Run ONLY integration and E2E tests (binaries pre-compiled from build job)
          cargo nextest run \
            --profile ci \
            --package tasker-shared \
            --package tasker-orchestration \
            --package tasker-worker \
            --package tasker-client \
            --package tasker-core \
            --test '*' \
            --no-fail-fast
        env:
          DATABASE_URL: postgresql://tasker:tasker@localhost:5432/tasker_rust_test
          TASKER_TEST_ORCHESTRATION_URL: http://localhost:8080
          TASKER_TEST_WORKER_URL: http://localhost:8081
          TASKER_TEST_RUBY_WORKER_URL: http://localhost:8082
          RUST_LOG: info

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('target/nextest/ci/junit.xml') != ''
        with:
          name: integration-test-results
          path: target/nextest/ci/junit.xml

      - name: Collect service logs on failure
        if: failure()
        run: |
          echo "📋 Collecting service logs for debugging..."
          mkdir -p docker-logs
          docker compose -f docker/docker-compose.test.yml logs postgres > docker-logs/postgres.log
          docker compose -f docker/docker-compose.test.yml logs orchestration > docker-logs/orchestration.log
          docker compose -f docker/docker-compose.test.yml logs worker > docker-logs/rust-worker.log
          docker compose -f docker/docker-compose.test.yml logs ruby-worker > docker-logs/ruby-worker.log

      - name: Upload service logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-service-logs
          path: docker-logs/

      - name: Shutdown services
        if: always()
        run: docker compose -f docker/docker-compose.test.yml down -v
