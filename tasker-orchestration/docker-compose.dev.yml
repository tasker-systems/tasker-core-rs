services:
  # PostgreSQL database with PGMQ extension (existing development setup)
  postgres:
    build:
      context: .
      dockerfile: db/Dockerfile
    environment:
      POSTGRES_DB: tasker_rust_test
      POSTGRES_USER: tasker
      POSTGRES_PASSWORD: tasker
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      # Persist data across restarts
      - postgres_data:/var/lib/postgresql/data
      # Optional: mount custom initialization scripts
      - ./docker/init-scripts:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tasker -d tasker_rust_test"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c log_statement=all
      -c log_destination=stderr
      -c log_min_messages=info
      -c log_connections=on
      -c log_disconnections=on
    networks:
      - tasker-dev

  # Tasker Server with orchestration and web API
  tasker-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tasker-server
    environment:
      TASKER_ENV: production
      TASKER_PROJECT_ROOT: /app
      DATABASE_URL: postgresql://tasker:tasker@postgres:5432/tasker_rust_test
      RUST_LOG: info
    ports:
      - "3000:8080" # Web API port (host:container)
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # Mount configuration for customization (optional)
      - ./config:/app/config:ro
      # Mount logs directory for persistence
      - ./log:/app/log
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3
    restart: unless-stopped
    networks:
      - tasker-dev
    profiles:
      - server # Only start when explicitly requested: docker-compose --profile server up

volumes:
  postgres_data:
    driver: local

networks:
  default:
    name: tasker-dev
  tasker-dev:
    name: tasker-dev
