# Credit Card Payment Task Template
# This matches the actual format used in config/tasks/payment_processing.yaml

name: payment_processing/credit_card_payment
module_namespace: PaymentProcessing
task_handler_class: CreditCardPaymentHandler
namespace_name: payments
version: "1.0.0"
description: "Process credit card payments with validation and fraud detection"
default_dependent_system: payment_gateway

# JSON Schema for input validation
schema:
  type: object
  required:
    - order_id
    - payment_info
    - customer_id
  properties:
    order_id:
      type: integer
      minimum: 1
    payment_info:
      type: object
      required: ['amount', 'currency', 'card_token']
      properties:
        amount:
          type: number
          minimum: 0.01
        currency:
          type: string
          enum: ['USD', 'EUR', 'GBP']
        card_token:
          type: string
          minLength: 10
    customer_id:
      type: integer
      minimum: 1

# Named steps in execution order
named_steps:
  - validate_payment
  - check_fraud
  - authorize_payment
  - capture_payment
  - send_confirmation

# Step template definitions
step_templates:
  - name: validate_payment
    description: "Validate payment information and check card status"
    handler_class: PaymentProcessing::StepHandler::ValidatePaymentHandler
    handler_config:
      validation_rules:
        - check_card_expiry
        - validate_cvv
        - check_amount_limits
    default_retryable: true
    default_retry_limit: 3
    timeout_seconds: 30

  - name: check_fraud
    description: "Run fraud detection algorithms"
    depends_on_step: validate_payment
    handler_class: PaymentProcessing::StepHandler::FraudCheckHandler
    handler_config:
      risk_threshold: 0.8
      timeout_ms: 5000
    default_retryable: true
    default_retry_limit: 2
    timeout_seconds: 60

  - name: authorize_payment
    description: "Authorize payment with payment gateway"
    depends_on_steps:
      - validate_payment
      - check_fraud
    handler_class: PaymentProcessing::StepHandler::AuthorizePaymentHandler
    handler_config:
      timeout_ms: 30000
    default_retryable: true
    default_retry_limit: 3
    timeout_seconds: 120
    retry_backoff: "exponential"

  - name: capture_payment
    description: "Capture the authorized payment"
    depends_on_step: authorize_payment
    handler_class: PaymentProcessing::StepHandler::CapturePaymentHandler
    handler_config:
      auto_capture: true
    default_retryable: true
    default_retry_limit: 5
    timeout_seconds: 120

  - name: send_confirmation
    description: "Send payment confirmation to customer"
    depends_on_step: capture_payment
    handler_class: PaymentProcessing::StepHandler::SendConfirmationHandler
    handler_config:
      template_id: "payment_confirmation"
    default_retryable: true
    default_retry_limit: 3
    timeout_seconds: 30

# Environment-specific overrides
environments:
  development:
    step_templates:
      - name: check_fraud
        handler_config:
          risk_threshold: 0.5
          debug_mode: true
      - name: authorize_payment
        handler_config:
          debug_mode: true
      - name: send_confirmation
        handler_config:
          debug_mode: true

  staging:
    step_templates:
      - name: check_fraud
        handler_config:
          risk_threshold: 0.7

  production:
    step_templates:
      - name: check_fraud
        handler_config:
          risk_threshold: 0.8

# Custom events for this task
custom_events:
  - name: payment_authorized
    description: "Fired when payment is successfully authorized"
    schema:
      type: object
      properties:
        order_id:
          type: integer
        authorization_id:
          type: string
        amount:
          type: number

  - name: payment_captured
    description: "Fired when payment is successfully captured"
    schema:
      type: object
      properties:
        order_id:
          type: integer
        transaction_id:
          type: string
        amount:
          type: number

  - name: fraud_detected
    description: "Fired when fraud is detected"
    schema:
      type: object
      properties:
        order_id:
          type: integer
        risk_score:
          type: number
        reasons:
          type: array
          items:
            type: string