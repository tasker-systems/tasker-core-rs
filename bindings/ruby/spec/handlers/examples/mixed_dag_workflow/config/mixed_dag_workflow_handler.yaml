# TaskTemplate Configuration (Migrated)
# 
# This file has been automatically migrated from the legacy HandlerConfiguration
# format to the new self-describing TaskTemplate format.
#
# Template: mixed_dag_workflow/complex_dag_computation:1.0.0
# Migration Date: 2025-08-17T19:32:47Z
# Migration Tool: TaskerCore::Utils::TaskTemplateMigrator v1.0.0
#
# Key Changes:
# - Legacy 'step_templates' → 'steps' with enhanced structure
# - Legacy 'handler_class' → 'handler.callable'
# - Legacy 'handler_config' → 'handler.initialization'
# - Added comprehensive metadata and system dependencies
# - Enhanced retry configuration with backoff strategies
# - Added support for domain events and improved environment overrides
#
# Next Steps:
# 1. Review this migrated configuration
# 2. Test with your workflow handlers
# 3. Update handler classes to use new structure if needed
# 4. Remove the original .yaml file when satisfied
#
---
:name: complex_dag_computation
:namespace_name: mixed_dag_workflow
:version: 1.0.0
:description: Mixed DAG pattern with multiple convergence points and dependency types
:metadata:
  :author: TaskerCore Migration Tool
  :tags:
  - namespace:mixed_dag_workflow
  - pattern:complex
  - dependencies:complex
  - environments:configured
  - migrated:handler-configuration
  :documentation_url:
  :created_at: '2025-08-17T19:32:47Z'
  :updated_at: '2025-08-17T19:32:47Z'
:task_handler:
  :callable: MixedDagWorkflow::MixedDagWorkflowHandler
  :initialization:
    input_validation:
      required_fields:
      - even_number
      even_number_constraint: must_be_even
      value_range:
        min: 2
        max: 10
    expected_results:
      dag_init: n²
      dag_process_left: "(n²)²"
      dag_process_right: "(n²)²"
      dag_validate: "((n²)² × (n²)²)² = (n²)⁸"
      dag_transform: "((n²)²)² = (n²)⁸"
      dag_analyze: "((n²)²)² = (n²)⁸"
      dag_finalize: "(n¹⁶ × n⁸ × n⁸)² = (n³²)² = n⁶⁴"
:system_dependencies:
  :primary: default
  :secondary: []
:domain_events: []
:input_schema:
:steps:
- :name: dag_init
  :description: Square the even number (initial step A)
  :handler:
    :callable: MixedDagWorkflow::StepHandlers::DagInitHandler
    :initialization:
      operation: square
      description: Square the input number (n²)
  :system_dependency:
  :dependencies: []
  :retry:
    :retryable: true
    :limit: 3
    :backoff: exponential
    :backoff_base_ms: 1000
    :max_backoff_ms: 30000
  :timeout_seconds: 30
  :publishes_events: []
- :name: dag_process_left
  :description: Square the init result (step B)
  :handler:
    :callable: MixedDagWorkflow::StepHandlers::DagProcessLeftHandler
    :initialization:
      operation: square
      description: Square the init result ((n²)²)
  :system_dependency:
  :dependencies:
  - dag_init
  :retry:
    :retryable: true
    :limit: 3
    :backoff: exponential
    :backoff_base_ms: 1000
    :max_backoff_ms: 30000
  :timeout_seconds: 30
  :publishes_events: []
- :name: dag_process_right
  :description: Square the init result (step C)
  :handler:
    :callable: MixedDagWorkflow::StepHandlers::DagProcessRightHandler
    :initialization:
      operation: square
      description: Square the init result ((n²)²)
  :system_dependency:
  :dependencies:
  - dag_init
  :retry:
    :retryable: true
    :limit: 3
    :backoff: exponential
    :backoff_base_ms: 1000
    :max_backoff_ms: 30000
  :timeout_seconds: 30
  :publishes_events: []
- :name: dag_validate
  :description: Multiply left×right results, then square (step D - multiple parents)
  :handler:
    :callable: MixedDagWorkflow::StepHandlers::DagValidateHandler
    :initialization:
      operation: multiply_and_square
      description: Multiply both process results, then square ((n²)² × (n²)²)²
  :system_dependency:
  :dependencies:
  - dag_process_left
  - dag_process_right
  :retry:
    :retryable: true
    :limit: 3
    :backoff: exponential
    :backoff_base_ms: 1000
    :max_backoff_ms: 30000
  :timeout_seconds: 30
  :publishes_events: []
- :name: dag_transform
  :description: Square the left process result (step E - single parent)
  :handler:
    :callable: MixedDagWorkflow::StepHandlers::DagTransformHandler
    :initialization:
      operation: square
      description: Square the left process result (((n²)²)²)
  :system_dependency:
  :dependencies:
  - dag_process_left
  :retry:
    :retryable: true
    :limit: 3
    :backoff: exponential
    :backoff_base_ms: 1000
    :max_backoff_ms: 30000
  :timeout_seconds: 30
  :publishes_events: []
- :name: dag_analyze
  :description: Square the right process result (step F - single parent)
  :handler:
    :callable: MixedDagWorkflow::StepHandlers::DagAnalyzeHandler
    :initialization:
      operation: square
      description: Square the right process result (((n²)²)²)
  :system_dependency:
  :dependencies:
  - dag_process_right
  :retry:
    :retryable: true
    :limit: 3
    :backoff: exponential
    :backoff_base_ms: 1000
    :max_backoff_ms: 30000
  :timeout_seconds: 30
  :publishes_events: []
- :name: dag_finalize
  :description: Multiply all three results (D×E×F), then square (step G - multiple
    parents)
  :handler:
    :callable: MixedDagWorkflow::StepHandlers::DagFinalizeHandler
    :initialization:
      operation: multiply_three_and_square
      description: Multiply validate×transform×analyze results, then square
  :system_dependency:
  :dependencies:
  - dag_validate
  - dag_transform
  - dag_analyze
  :retry:
    :retryable: true
    :limit: 3
    :backoff: exponential
    :backoff_base_ms: 1000
    :max_backoff_ms: 30000
  :timeout_seconds: 30
  :publishes_events: []
:environments:
  test:
    :task_handler:
    :steps:
    - :name: dag_init
      :handler:
        :initialization:
          timeout_seconds: 10
      :timeout_seconds:
      :retry:
    - :name: dag_process_left
      :handler:
        :initialization:
          timeout_seconds: 10
      :timeout_seconds:
      :retry:
    - :name: dag_process_right
      :handler:
        :initialization:
          timeout_seconds: 10
      :timeout_seconds:
      :retry:
    - :name: dag_validate
      :handler:
        :initialization:
          timeout_seconds: 10
      :timeout_seconds:
      :retry:
    - :name: dag_transform
      :handler:
        :initialization:
          timeout_seconds: 10
      :timeout_seconds:
      :retry:
    - :name: dag_analyze
      :handler:
        :initialization:
          timeout_seconds: 10
      :timeout_seconds:
      :retry:
    - :name: dag_finalize
      :handler:
        :initialization:
          timeout_seconds: 15
      :timeout_seconds:
      :retry:
:loaded_from: "/Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/handlers/examples/mixed_dag_workflow/config/mixed_dag_workflow_handler.yaml"
