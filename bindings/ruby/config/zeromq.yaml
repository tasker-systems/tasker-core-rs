# ZeroMQ Configuration for Tasker Core - TCP Architecture
# Updated for cross-language TCP-based communication between Rust and Ruby

step_execution:
  # TCP endpoints for cross-language communication
  # Ruby subscribes to step batches, publishes results back
  handler_step_subscriber: "tcp://127.0.0.1:5555"    # Ruby receives steps from Rust
  handler_result_publisher: "tcp://127.0.0.1:5556"   # Ruby publishes results to Rust
  
  # Concurrent execution settings
  max_workers: 10                   # Maximum concurrent Ruby workers
  batch_size: 10                    # Maximum steps per batch
  
  # Timeout and polling settings
  result_timeout_ms: 300000         # 5 minutes max wait for results
  handler_poll_interval_ms: 1       # Polling frequency for non-blocking receives
  
  # High-water marks for message queuing
  step_queue_hwm: 1000              # Max queued step messages
  result_queue_hwm: 1000            # Max queued result messages
  
  # Reliability settings
  reconnect_interval_ms: 1000       # Time between reconnection attempts
  max_reconnect_attempts: 10        # Maximum reconnection attempts

# Development environment - faster feedback, more debugging
development:
  step_execution:
    # Same TCP approach but with different ports for dev isolation
    handler_step_subscriber: "tcp://127.0.0.1:7777"
    handler_result_publisher: "tcp://127.0.0.1:7778"
    
    # Development settings for faster iteration
    max_workers: 5                  # Fewer workers for development
    result_timeout_ms: 30000        # 30 seconds for development
    handler_poll_interval_ms: 10    # More frequent polling for responsiveness
    batch_size: 5                   # Smaller batches for easier debugging

# Test environment - isolated and predictable
test:
  step_execution:
    # Dedicated test ports to avoid conflicts
    handler_step_subscriber: "tcp://127.0.0.1:8777"
    handler_result_publisher: "tcp://127.0.0.1:8778"
    
    # Test settings optimized for test suite performance
    max_workers: 3                  # Minimal workers for tests
    result_timeout_ms: 10000        # 10 seconds max for tests
    handler_poll_interval_ms: 5     # Quick polling for test responsiveness
    batch_size: 3                   # Small batches for test isolation

# Production environment - high throughput and reliability
production:
  step_execution:
    # Production TCP endpoints - can be overridden by deployment config
    handler_step_subscriber: "tcp://127.0.0.1:5555"
    handler_result_publisher: "tcp://127.0.0.1:5556"
    
    # Production settings for high throughput
    max_workers: 50                 # High concurrency for production
    batch_size: 25                  # Larger batches for efficiency
    result_timeout_ms: 600000       # 10 minutes for complex operations
    handler_poll_interval_ms: 1     # Efficient polling
    
    # Higher throughput settings
    step_queue_hwm: 10000           # Higher queue limits
    result_queue_hwm: 10000
    reconnect_interval_ms: 500      # Faster reconnection
    max_reconnect_attempts: 50      # More retry attempts

# Staging environment - production-like but with more debugging
staging:
  step_execution:
    # Staging-specific ports
    handler_step_subscriber: "tcp://127.0.0.1:6555"
    handler_result_publisher: "tcp://127.0.0.1:6556"
    
    # Production-like settings with debugging-friendly timeouts
    max_workers: 20                 # Medium concurrency
    batch_size: 15                  # Medium batch size
    result_timeout_ms: 300000       # 5 minutes (between dev and prod)
    handler_poll_interval_ms: 2     # Slightly more frequent polling

# Docker/Kubernetes deployment example
# docker:
#   step_execution:
#     # Use service names for cross-container communication
#     handler_step_subscriber: "tcp://tasker-orchestrator:5555"
#     handler_result_publisher: "tcp://tasker-orchestrator:5556"
#     max_workers: 25
#     batch_size: 20

# Multi-host deployment example  
# distributed:
#   step_execution:
#     # Network endpoints for distributed deployment
#     handler_step_subscriber: "tcp://orchestrator.internal:5555"
#     handler_result_publisher: "tcp://orchestrator.internal:5556"
#     max_workers: 100               # High worker count for distributed processing
#     batch_size: 50                 # Large batches for network efficiency