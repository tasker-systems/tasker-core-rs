  #step_ready_for_execution?
    when called with invalid step_id
E, [2025-07-25T11:43:03.172185 #23403] ERROR -- : Failed to get dependencies for step 99999: undefined method `get_step_dependencies' for #<TaskerCore::OrchestrationHandle:0x0000000106bacd20>
      handles errors gracefully
    when FFI methods are not implemented
E, [2025-07-25T11:43:03.172943 #23403] ERROR -- : Failed to get dependencies for step 123: undefined method `get_step_dependencies' for #<TaskerCore::OrchestrationHandle:0x0000000106bacd20>
      handles missing implementation gracefully
  #get_steps_in_dependency_order
    when FFI methods are implemented (future)
      returns properly structured step information (PENDING: FFI method 'get_steps_in_dependency_order' not yet implemented - planned for Phase 3)
      returns steps in proper dependency order (topological sort) (PENDING: FFI method 'get_steps_in_dependency_order' not yet implemented - planned for Phase 3)
    when called with invalid task_id
E, [2025-07-25T11:43:03.173371 #23403] ERROR -- : Failed to get workflow steps for task 99999: undefined method `get_task_workflow_steps' for #<TaskerCore::OrchestrationHandle:0x0000000106bacd20>
      handles non-existent task gracefully
    when FFI methods are not yet implemented
      handles missing FFI implementation gracefully (FAILED - 9)
  #get_task_step_summary
    returns summary structure even when steps are empty (FAILED - 10)
--
      provides accurate step counts and categorization (PENDING: FFI method 'get_task_step_summary' not yet fully implemented - planned for Phase 3)
  error handling and logging
E, [2025-07-25T11:43:03.174624 #23403] ERROR -- : Failed to get workflow steps for task : undefined method `get_task_workflow_steps' for #<TaskerCore::OrchestrationHandle:0x0000000106bacd20>
    logs errors appropriately
  private helper methods
    #topological_sort
W, [2025-07-25T11:43:03.174854 #23403]  WARN -- : Circular dependency detected in workflow steps
      handles circular dependencies gracefully
--
      returns error information (FAILED - 11)
    when no handler is provided and cannot find one
E, [2025-07-25T11:43:03.175370 #23403] ERROR -- : Failed to get workflow steps for task 99999: undefined method `get_task_workflow_steps' for #<TaskerCore::OrchestrationHandle:0x0000000106bacd20>
      returns error about missing handler (FAILED - 12)
    when FFI methods are implemented (future)
      returns comprehensive execution summary (PENDING: FFI method 'execute_steps_up_to' not yet implemented - planned for Phase 3)
  module inclusion
    includes StepTestHelpers methods
--
[2m2025-07-25T15:43:05.366464Z[0m [34mDEBUG[0m ThreadId(01) [2mffi[0m[2m:[0m Success: task_id=1032, step_count=4 [3mcomponent[0m[2m=[0m"initialize_task"
[2m2025-07-25T15:43:05.366497Z[0m [34mDEBUG[0m ThreadId(01) [2mffi[0m[2m:[0m FFI EXIT - initialize_task: Returning task_id=1032 [3mcomponent[0m[2m=[0m"ffi_boundary"
E, [2025-07-25T11:43:05.366619 #23403] ERROR -- : Failed to get workflow steps for task 1032: undefined method `get_task_workflow_steps' for #<TaskerCore::OrchestrationHandle:0x0000000106bacd20>
      prevents execution of steps with unmet dependencies (PENDING: Steps not available (FFI implementation needed))
[2m2025-07-25T15:43:05.367831Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::handles[0m[2m:[0m üîß Ruby FFI: register_handler() - delegating to shared handle
[2m2025-07-25T15:43:05.367839Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::context[0m[2m:[0m üîç CONTEXT: Processing hash with 5 entries
[2m2025-07-25T15:43:05.367843Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::context[0m[2m:[0m üîç CONTEXT: Processing key: :namespace, value: "fulfillment"
[2m2025-07-25T15:43:05.367851Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::context[0m[2m:[0m üîç CONTEXT: Converted key to string: namespace
--
[2m2025-07-25T15:43:05.400160Z[0m [34mDEBUG[0m ThreadId(01) [2mffi[0m[2m:[0m Success: task_id=1033, step_count=4 [3mcomponent[0m[2m=[0m"initialize_task"
[2m2025-07-25T15:43:05.400187Z[0m [34mDEBUG[0m ThreadId(01) [2mffi[0m[2m:[0m FFI EXIT - initialize_task: Returning task_id=1033 [3mcomponent[0m[2m=[0m"ffi_boundary"
E, [2025-07-25T11:43:05.400298 #23403] ERROR -- : Failed to get workflow steps for task 1033: undefined method `get_task_workflow_steps' for #<TaskerCore::OrchestrationHandle:0x0000000106bacd20>
      provides detailed task context and step state information (PENDING: Task summary not available (FFI implementation needed))
    when testing individual steps with dependency awareness
[2m2025-07-25T15:43:05.401419Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::handles[0m[2m:[0m üîß Ruby FFI: register_handler() - delegating to shared handle
[2m2025-07-25T15:43:05.401426Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::context[0m[2m:[0m üîç CONTEXT: Processing hash with 5 entries
[2m2025-07-25T15:43:05.401429Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::context[0m[2m:[0m üîç CONTEXT: Processing key: :namespace, value: "fulfillment"
--
[2m2025-07-25T15:43:05.441182Z[0m [34mDEBUG[0m ThreadId(01) [2mffi[0m[2m:[0m Success: task_id=1034, step_count=4 [3mcomponent[0m[2m=[0m"initialize_task"
[2m2025-07-25T15:43:05.441214Z[0m [34mDEBUG[0m ThreadId(01) [2mffi[0m[2m:[0m FFI EXIT - initialize_task: Returning task_id=1034 [3mcomponent[0m[2m=[0m"ffi_boundary"
E, [2025-07-25T11:43:05.441355 #23403] ERROR -- : Failed to get workflow steps for task 1034: undefined method `get_task_workflow_steps' for #<TaskerCore::OrchestrationHandle:0x0000000106bacd20>
      validates step dependencies before execution (PENDING: Steps not available (FFI method get_workflow_steps_for_task not yet implemented))
[2m2025-07-25T15:43:05.442420Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::handles[0m[2m:[0m üîß Ruby FFI: register_handler() - delegating to shared handle
[2m2025-07-25T15:43:05.442427Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::context[0m[2m:[0m üîç CONTEXT: Processing hash with 5 entries
[2m2025-07-25T15:43:05.442430Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::context[0m[2m:[0m üîç CONTEXT: Processing key: :namespace, value: "fulfillment"
[2m2025-07-25T15:43:05.442438Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::context[0m[2m:[0m üîç CONTEXT: Converted key to string: namespace
--
[2m2025-07-25T15:43:05.462486Z[0m [34mDEBUG[0m ThreadId(01) [2mffi[0m[2m:[0m Success: task_id=1035, step_count=4 [3mcomponent[0m[2m=[0m"initialize_task"
[2m2025-07-25T15:43:05.462509Z[0m [34mDEBUG[0m ThreadId(01) [2mffi[0m[2m:[0m FFI EXIT - initialize_task: Returning task_id=1035 [3mcomponent[0m[2m=[0m"ffi_boundary"
E, [2025-07-25T11:43:05.462599 #23403] ERROR -- : Failed to get workflow steps for task 1035: undefined method `get_task_workflow_steps' for #<TaskerCore::OrchestrationHandle:0x0000000106bacd20>
      executes steps sequentially respecting dependencies (PENDING: Steps not available (FFI implementation needed))
  Helper method integration
[2m2025-07-25T15:43:05.463531Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::handles[0m[2m:[0m üîß Ruby FFI: register_handler() - delegating to shared handle
[2m2025-07-25T15:43:05.463536Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::context[0m[2m:[0m üîç CONTEXT: Processing hash with 5 entries
[2m2025-07-25T15:43:05.463539Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::context[0m[2m:[0m üîç CONTEXT: Processing key: :namespace, value: "fulfillment"
--
[2m2025-07-25T15:43:05.485445Z[0m [34mDEBUG[0m ThreadId(01) [2mffi[0m[2m:[0m Success: task_id=1036, step_count=4 [3mcomponent[0m[2m=[0m"initialize_task"
[2m2025-07-25T15:43:05.485471Z[0m [34mDEBUG[0m ThreadId(01) [2mffi[0m[2m:[0m FFI EXIT - initialize_task: Returning task_id=1036 [3mcomponent[0m[2m=[0m"ffi_boundary"
E, [2025-07-25T11:43:05.485537 #23403] ERROR -- : Failed to get workflow steps for task 1036: undefined method `get_task_workflow_steps' for #<TaskerCore::OrchestrationHandle:0x0000000106bacd20>
    can find steps by name (PENDING: Step lookup not available (FFI implementation needed))
[2m2025-07-25T15:43:05.486486Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::handles[0m[2m:[0m üîß Ruby FFI: register_handler() - delegating to shared handle
[2m2025-07-25T15:43:05.486491Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::context[0m[2m:[0m üîç CONTEXT: Processing hash with 5 entries
[2m2025-07-25T15:43:05.486499Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::context[0m[2m:[0m üîç CONTEXT: Processing key: :namespace, value: "fulfillment"
[2m2025-07-25T15:43:05.486504Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::context[0m[2m:[0m üîç CONTEXT: Converted key to string: namespace
--
[2m2025-07-25T15:43:05.504604Z[0m [34mDEBUG[0m ThreadId(01) [2mffi[0m[2m:[0m Success: task_id=1037, step_count=4 [3mcomponent[0m[2m=[0m"initialize_task"
[2m2025-07-25T15:43:05.504630Z[0m [34mDEBUG[0m ThreadId(01) [2mffi[0m[2m:[0m FFI EXIT - initialize_task: Returning task_id=1037 [3mcomponent[0m[2m=[0m"ffi_boundary"
E, [2025-07-25T11:43:05.504709 #23403] ERROR -- : Failed to get workflow steps for task 1037: undefined method `get_task_workflow_steps' for #<TaskerCore::OrchestrationHandle:0x0000000106bacd20>
    provides step readiness checking (PENDING: Step readiness checking not available (FFI implementation needed))

TCP ZeroMQ Integration
  FFI Bootstrap Architecture
    successfully creates orchestration handle
--
[2m2025-07-25T15:43:16.782366Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::context[0m[2m:[0m üîç CONTEXT: Converted key to string: name
[2m2025-07-25T15:43:16.782368Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::context[0m[2m:[0m üîç CONTEXT: Inserting key 'name' with value: String("test_step_ec0a20da")
[2m2025-07-25T15:43:16.782371Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::context[0m[2m:[0m üîç CONTEXT: Processing key: :inputs, value: {:step_type=>"api_call", :url=>"https://api.example.com/process", :method=>"POST", :expected_duration_seconds=>5}
[2m2025-07-25T15:43:16.782383Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::context[0m[2m:[0m üîç CONTEXT: Converted key to string: inputs
[2m2025-07-25T15:43:16.782385Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::context[0m[2m:[0m üîç CONTEXT: Processing hash with 4 entries
[2m2025-07-25T15:43:16.782387Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::context[0m[2m:[0m üîç CONTEXT: Processing key: :step_type, value: "api_call"
[2m2025-07-25T15:43:16.782391Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::context[0m[2m:[0m üîç CONTEXT: Converted key to string: step_type
[2m2025-07-25T15:43:16.782393Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::context[0m[2m:[0m üîç CONTEXT: Inserting key 'step_type' with value: String("api_call")
--
[2m2025-07-25T15:43:16.782410Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::context[0m[2m:[0m üîç CONTEXT: Converted key to string: method
[2m2025-07-25T15:43:16.782412Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::context[0m[2m:[0m üîç CONTEXT: Inserting key 'method' with value: String("POST")
[2m2025-07-25T15:43:16.782415Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::context[0m[2m:[0m üîç CONTEXT: Processing key: :expected_duration_seconds, value: 5
[2m2025-07-25T15:43:16.782418Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::context[0m[2m:[0m üîç CONTEXT: Converted key to string: expected_duration_seconds
[2m2025-07-25T15:43:16.782425Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::context[0m[2m:[0m üîç CONTEXT: Inserting key 'expected_duration_seconds' with value: Number(5)
[2m2025-07-25T15:43:16.782428Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::context[0m[2m:[0m üîç CONTEXT: Final map has 4 entries
[2m2025-07-25T15:43:16.782430Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::context[0m[2m:[0m üîç CONTEXT: Inserting key 'inputs' with value: Object {"expected_duration_seconds": Number(5), "method": String("POST"), "step_type": String("api_call"), "url": String("https://api.example.com/process")}
[2m2025-07-25T15:43:16.782435Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core_rb::context[0m[2m:[0m üîç CONTEXT: Final map has 3 entries
[2m2025-07-25T15:43:16.782438Z[0m [34mDEBUG[0m ThreadId(01) [2mtasker_core::ffi::shared::testing[0m[2m:[0m üîç SHARED FACTORY create_test_step: task_id=1176, name=test_step_ec0a20da
[2m2025-07-25T15:43:16.782590Z[0m [34mDEBUG[0m ThreadId(01) [2msqlx::query[0m[2m:[0m [3msummary[0m[2m=[0m"SELECT task_id, named_task_id, complete, ‚Ä¶" [3mdb.statement[0m[2m=[0m"\n\n\n            SELECT task_id, named_task_id, complete, requested_at, initiator, source_system,\n                   reason, bypass_steps, tags, context, identity_hash, created_at, updated_at\n            FROM tasker_tasks\n            WHERE task_id = $1\n            \n" [3mrows_affected[0m[2m=[0m1 [3mrows_returned[0m[2m=[0m1 [3melapsed[0m[2m=[0m68.417¬µs [3melapsed_secs[0m[2m=[0m6.8417e-5
[2m2025-07-25T15:43:16.782727Z[0m [34mDEBUG[0m ThreadId(01) [2msqlx::query[0m[2m:[0m [3msummary[0m[2m=[0m"SELECT named_task_id, name, version, ‚Ä¶" [3mdb.statement[0m[2m=[0m"\n\n\n            SELECT named_task_id, name, version, description, task_namespace_id, configuration, created_at, updated_at\n            FROM tasker_named_tasks\n            WHERE named_task_id = $1\n            \n" [3mrows_affected[0m[2m=[0m1 [3mrows_returned[0m[2m=[0m1 [3melapsed[0m[2m=[0m57¬µs [3melapsed_secs[0m[2m=[0m5.7e-5
[2m2025-07-25T15:43:16.782857Z[0m [34mDEBUG[0m ThreadId(01) [2msqlx::query[0m[2m:[0m [3msummary[0m[2m=[0m"SELECT named_step_id, dependent_system_id, name, ‚Ä¶" [3mdb.statement[0m[2m=[0m"\n\n\n            SELECT named_step_id, dependent_system_id, name, description, created_at, updated_at\n            FROM tasker_named_steps\n            WHERE name = $1\n            ORDER BY created_at\n            \n" [3mrows_affected[0m[2m=[0m0 [3mrows_returned[0m[2m=[0m0 [3melapsed[0m[2m=[0m56.709¬µs [3melapsed_secs[0m[2m=[0m5.6709e-5
--
TESTING STEP 1: VALIDATE_ORDER
----------------------------------------
      validates expected fulfillment workflow structure (FAILED - 67)
    when testing dependency management framework

üîç Testing step discovery framework
      provides step discovery and organization capabilities (FAILED - 68)
  Integration with existing workflow systems
--
[2m2025-07-25T15:43:17.018010Z[0m [32m INFO[0m ThreadId(01) [2mtasker_core::ffi::shared::handles[0m[2m:[0m Successfully registered task template for TaskConfigFinder [3mnamespace[0m[2m=[0m"fulfillment" [3mname[0m[2m=[0m"process_order" [3mversion[0m[2m=[0m"1.0.0"
I, [2025-07-25T11:43:17.018058 #23403]  INFO -- : ‚úÖ Registered task handler: TaskerCore::TaskHandler::Base for task: process_order (Rust + Ruby registries)
      provides step handlers with expected interface
  O(1) Step Handler Performance
I, [2025-07-25T11:43:17.018727 #23403]  INFO -- : Successfully connected to shared step handler bridge
I, [2025-07-25T11:43:17.018736 #23403]  INFO -- : Successfully connected to shared step handler bridge
I, [2025-07-25T11:43:17.018742 #23403]  INFO -- : Successfully connected to shared step handler bridge
I, [2025-07-25T11:43:17.018747 #23403]  INFO -- : Successfully connected to shared step handler bridge
--
[2m2025-07-25T15:43:17.040724Z[0m [32m INFO[0m ThreadId(01) [2mtasker_core::ffi::shared::handles[0m[2m:[0m Successfully registered task template for TaskConfigFinder [3mnamespace[0m[2m=[0m"fulfillment" [3mname[0m[2m=[0m"process_order" [3mversion[0m[2m=[0m"1.0.0"
I, [2025-07-25T11:43:17.040762 #23403]  INFO -- : ‚úÖ Registered task handler: TaskerCore::TaskHandler::Base for task: process_order (Rust + Ruby registries)
      includes expected order fulfillment step handlers
I, [2025-07-25T11:43:17.041400 #23403]  INFO -- : Successfully connected to shared step handler bridge
I, [2025-07-25T11:43:17.041408 #23403]  INFO -- : Successfully connected to shared step handler bridge
I, [2025-07-25T11:43:17.041414 #23403]  INFO -- : Successfully connected to shared step handler bridge
I, [2025-07-25T11:43:17.041419 #23403]  INFO -- : Successfully connected to shared step handler bridge
I, [2025-07-25T11:43:17.041423 #23403]  INFO -- : üî• Pre-instantiated 4 step handlers for O(1) lookup
--
‚ö†Ô∏è  Test environment cleanup warning: Failed to create TestingFramework: Test environment validation failed - no test environment variable found

Pending: (Failures listed here are expected and do not affect your suite's status)

  1) TaskerCore::TestHelpers::StepTestHelpers#find_step_by_name when FFI methods are implemented (future) finds step by name when it exists
     # FFI method 'find_step_by_name' not yet implemented - planned for Phase 3
     # ./spec/test_helpers/step_test_helpers_spec.rb:208

--

  1) Ruby ZeroMQ Standalone Ruby-only ZeroMQ Validation validates BatchStepExecutionOrchestrator works independently of Rust FFI
     Failure/Error:
       def initialize(config: nil, handler_registry: nil, zmq_orchestrator: nil)
         @config = config || TaskerCore::Config.instance.zeromq
         
         # Compose ZeroMQ orchestrator for socket management
         @zmq_orchestrator = zmq_orchestrator || ZeromqOrchestrator.new(config: @config)
--
           max_threads: @config.max_workers,

     ArgumentError:
       unknown keywords: :step_sub_endpoint, :result_pub_endpoint, :max_workers
     # ./lib/tasker_core/orchestration/batch_step_execution_orchestrator.rb:48:in `initialize'
     # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:39:in `new'
     # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:39:in `block (2 levels) in <top (required)>'
     # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:189:in `block (3 levels) in <top (required)>'
--
     Got 1 failure and 1 other error:

     2.1) Failure/Error: expect { orchestrator.start }.not_to raise_error

            expected no Exception, got #<ArgumentError: unknown keywords: :step_sub_endpoint, :result_pub_endpoint, :max_workers> with backtrace:
              # ./lib/tasker_core/orchestration/batch_step_execution_orchestrator.rb:48:in `initialize'
              # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:39:in `new'
              # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:39:in `block (2 levels) in <top (required)>'
              # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:59:in `block (4 levels) in <top (required)>'
              # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:59:in `block (3 levels) in <top (required)>'
          # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:59:in `block (3 levels) in <top (required)>'

     2.2) Failure/Error:
            def initialize(config: nil, handler_registry: nil, zmq_orchestrator: nil)
              @config = config || TaskerCore::Config.instance.zeromq
              
              # Compose ZeroMQ orchestrator for socket management
              @zmq_orchestrator = zmq_orchestrator || ZeromqOrchestrator.new(config: @config)
--
                max_threads: @config.max_workers,

          ArgumentError:
            unknown keywords: :step_sub_endpoint, :result_pub_endpoint, :max_workers
          # ./lib/tasker_core/orchestration/batch_step_execution_orchestrator.rb:48:in `initialize'
          # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:39:in `new'
          # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:39:in `block (2 levels) in <top (required)>'
          # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:55:in `block (3 levels) in <top (required)>'
--
     Got 0 failures and 2 other errors:

     3.1) Failure/Error:
            def initialize(config: nil, handler_registry: nil, zmq_orchestrator: nil)
              @config = config || TaskerCore::Config.instance.zeromq
              
              # Compose ZeroMQ orchestrator for socket management
              @zmq_orchestrator = zmq_orchestrator || ZeromqOrchestrator.new(config: @config)
--
                max_threads: @config.max_workers,

          ArgumentError:
            unknown keywords: :step_sub_endpoint, :result_pub_endpoint, :max_workers
          # ./lib/tasker_core/orchestration/batch_step_execution_orchestrator.rb:48:in `initialize'
          # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:39:in `new'
          # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:39:in `block (2 levels) in <top (required)>'
          # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:64:in `block (4 levels) in <top (required)>'

     3.2) Failure/Error:
            def initialize(config: nil, handler_registry: nil, zmq_orchestrator: nil)
              @config = config || TaskerCore::Config.instance.zeromq
              
              # Compose ZeroMQ orchestrator for socket management
              @zmq_orchestrator = zmq_orchestrator || ZeromqOrchestrator.new(config: @config)
--
                max_threads: @config.max_workers,

          ArgumentError:
            unknown keywords: :step_sub_endpoint, :result_pub_endpoint, :max_workers
          # ./lib/tasker_core/orchestration/batch_step_execution_orchestrator.rb:48:in `initialize'
          # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:39:in `new'
          # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:39:in `block (2 levels) in <top (required)>'
          # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:55:in `block (3 levels) in <top (required)>'
--
     Got 0 failures and 2 other errors:

     4.1) Failure/Error:
            def initialize(config: nil, handler_registry: nil, zmq_orchestrator: nil)
              @config = config || TaskerCore::Config.instance.zeromq
              
              # Compose ZeroMQ orchestrator for socket management
              @zmq_orchestrator = zmq_orchestrator || ZeromqOrchestrator.new(config: @config)
--
                max_threads: @config.max_workers,

          ArgumentError:
            unknown keywords: :step_sub_endpoint, :result_pub_endpoint, :max_workers
          # ./lib/tasker_core/orchestration/batch_step_execution_orchestrator.rb:48:in `initialize'
          # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:39:in `new'
          # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:39:in `block (2 levels) in <top (required)>'
          # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:64:in `block (4 levels) in <top (required)>'

     4.2) Failure/Error:
            def initialize(config: nil, handler_registry: nil, zmq_orchestrator: nil)
              @config = config || TaskerCore::Config.instance.zeromq
              
              # Compose ZeroMQ orchestrator for socket management
              @zmq_orchestrator = zmq_orchestrator || ZeromqOrchestrator.new(config: @config)
--
                max_threads: @config.max_workers,

          ArgumentError:
            unknown keywords: :step_sub_endpoint, :result_pub_endpoint, :max_workers
          # ./lib/tasker_core/orchestration/batch_step_execution_orchestrator.rb:48:in `initialize'
          # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:39:in `new'
          # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:39:in `block (2 levels) in <top (required)>'
          # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:55:in `block (3 levels) in <top (required)>'
--
     Got 0 failures and 2 other errors:

     5.1) Failure/Error:
            def initialize(config: nil, handler_registry: nil, zmq_orchestrator: nil)
              @config = config || TaskerCore::Config.instance.zeromq
              
              # Compose ZeroMQ orchestrator for socket management
              @zmq_orchestrator = zmq_orchestrator || ZeromqOrchestrator.new(config: @config)
--
                max_threads: @config.max_workers,

          ArgumentError:
            unknown keywords: :step_sub_endpoint, :result_pub_endpoint, :max_workers
          # ./lib/tasker_core/orchestration/batch_step_execution_orchestrator.rb:48:in `initialize'
          # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:39:in `new'
          # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:39:in `block (2 levels) in <top (required)>'
          # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:64:in `block (4 levels) in <top (required)>'

     5.2) Failure/Error:
            def initialize(config: nil, handler_registry: nil, zmq_orchestrator: nil)
              @config = config || TaskerCore::Config.instance.zeromq
              
              # Compose ZeroMQ orchestrator for socket management
              @zmq_orchestrator = zmq_orchestrator || ZeromqOrchestrator.new(config: @config)
--
                max_threads: @config.max_workers,

          ArgumentError:
            unknown keywords: :step_sub_endpoint, :result_pub_endpoint, :max_workers
          # ./lib/tasker_core/orchestration/batch_step_execution_orchestrator.rb:48:in `initialize'
          # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:39:in `new'
          # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:39:in `block (2 levels) in <top (required)>'
          # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:55:in `block (3 levels) in <top (required)>'
--
     Got 0 failures and 2 other errors:

     6.1) Failure/Error:
            def initialize(config: nil, handler_registry: nil, zmq_orchestrator: nil)
              @config = config || TaskerCore::Config.instance.zeromq
              
              # Compose ZeroMQ orchestrator for socket management
              @zmq_orchestrator = zmq_orchestrator || ZeromqOrchestrator.new(config: @config)
--
                max_threads: @config.max_workers,

          ArgumentError:
            unknown keywords: :step_sub_endpoint, :result_pub_endpoint, :max_workers
          # ./lib/tasker_core/orchestration/batch_step_execution_orchestrator.rb:48:in `initialize'
          # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:39:in `new'
          # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:39:in `block (2 levels) in <top (required)>'
          # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:64:in `block (4 levels) in <top (required)>'

     6.2) Failure/Error:
            def initialize(config: nil, handler_registry: nil, zmq_orchestrator: nil)
              @config = config || TaskerCore::Config.instance.zeromq
              
              # Compose ZeroMQ orchestrator for socket management
              @zmq_orchestrator = zmq_orchestrator || ZeromqOrchestrator.new(config: @config)
--
                max_threads: @config.max_workers,

          ArgumentError:
            unknown keywords: :step_sub_endpoint, :result_pub_endpoint, :max_workers
          # ./lib/tasker_core/orchestration/batch_step_execution_orchestrator.rb:48:in `initialize'
          # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:39:in `new'
          # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:39:in `block (2 levels) in <top (required)>'
          # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:55:in `block (3 levels) in <top (required)>'

  7) Ruby ZeroMQ Standalone BatchStepExecutionOrchestrator Creation creates orchestrator with test endpoints successfully
     Failure/Error:
       def initialize(config: nil, handler_registry: nil, zmq_orchestrator: nil)
         @config = config || TaskerCore::Config.instance.zeromq
         
         # Compose ZeroMQ orchestrator for socket management
         @zmq_orchestrator = zmq_orchestrator || ZeromqOrchestrator.new(config: @config)
--
           max_threads: @config.max_workers,

     ArgumentError:
       unknown keywords: :step_sub_endpoint, :result_pub_endpoint, :max_workers
     # ./lib/tasker_core/orchestration/batch_step_execution_orchestrator.rb:48:in `initialize'
     # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:39:in `new'
     # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:39:in `block (2 levels) in <top (required)>'
     # ./spec/handlers/integration/ruby_zeromq_standalone_spec.rb:49:in `block (3 levels) in <top (required)>'

  8) TaskerCore::TestHelpers::StepTestHelpers#find_step_by_name returns nil when step not found
     Failure/Error: let(:config) { YAML.load_file(config_path) }

     Errno::ENOENT:
       No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/handlers/examples/order_fulfillment/config/order_fulfillment_handler.yaml
     # ./spec/test_helpers/step_test_helpers_spec.rb:9:in `block (2 levels) in <top (required)>'
     # ./spec/test_helpers/step_test_helpers_spec.rb:35:in `block (2 levels) in <top (required)>'
     # ./spec/test_helpers/step_test_helpers_spec.rb:52:in `block (2 levels) in <top (required)>'
     # ./spec/test_helpers/step_test_helpers_spec.rb:203:in `block (3 levels) in <top (required)>'

  9) TaskerCore::TestHelpers::StepTestHelpers#get_steps_in_dependency_order when FFI methods are not yet implemented handles missing FFI implementation gracefully
     Failure/Error: let(:config) { YAML.load_file(config_path) }

     Errno::ENOENT:
       No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/handlers/examples/order_fulfillment/config/order_fulfillment_handler.yaml
     # ./spec/test_helpers/step_test_helpers_spec.rb:9:in `block (2 levels) in <top (required)>'
     # ./spec/test_helpers/step_test_helpers_spec.rb:35:in `block (2 levels) in <top (required)>'
     # ./spec/test_helpers/step_test_helpers_spec.rb:52:in `block (2 levels) in <top (required)>'
     # ./spec/test_helpers/step_test_helpers_spec.rb:70:in `block (4 levels) in <top (required)>'

  10) TaskerCore::TestHelpers::StepTestHelpers#get_task_step_summary returns summary structure even when steps are empty
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/handlers/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/test_helpers/step_test_helpers_spec.rb:9:in `block (2 levels) in <top (required)>'
      # ./spec/test_helpers/step_test_helpers_spec.rb:35:in `block (2 levels) in <top (required)>'
      # ./spec/test_helpers/step_test_helpers_spec.rb:52:in `block (2 levels) in <top (required)>'
      # ./spec/test_helpers/step_test_helpers_spec.rb:224:in `block (3 levels) in <top (required)>'

  11) TaskerCore::TestHelpers::StepTestHelpers#execute_steps_up_to when target step does not exist returns error information
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/handlers/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/test_helpers/step_test_helpers_spec.rb:9:in `block (2 levels) in <top (required)>'
      # ./spec/test_helpers/step_test_helpers_spec.rb:35:in `block (2 levels) in <top (required)>'
      # ./spec/test_helpers/step_test_helpers_spec.rb:52:in `block (2 levels) in <top (required)>'
      # ./spec/test_helpers/step_test_helpers_spec.rb:135:in `block (4 levels) in <top (required)>'

  12) TaskerCore::TestHelpers::StepTestHelpers#execute_steps_up_to when no handler is provided and cannot find one returns error about missing handler
      Failure/Error: expect(result[:error]).to include("No handler found")
        expected "Target step 'some_step' not found" to include "No handler found"
      # ./spec/test_helpers/step_test_helpers_spec.rb:154:in `block (4 levels) in <top (required)>'

  13) Step-by-step Integration Testing StepHandleResult comprehensive testing validates all StepHandleResult fields and methods
      Failure/Error:
              def handle_one_step(task, sequence, step)
                step_handler = get_step_handler(step)
                return { error: 'Step handler not found' } unless step_handler
        
                step_handler.process(task, sequence, step)
              end

      ArgumentError:
        wrong number of arguments (given 1, expected 3)
      # ./lib/tasker_core/task_handler/base.rb:322:in `handle_one_step'
      # ./spec/handlers/integration/step_by_step_integration_spec.rb:296:in `block (3 levels) in <top (required)>'

  14) Step-by-step Integration Testing Testing Approach 2: Sequential step-by-step testing when testing individual steps with dependency awareness provides comprehensive debugging information for failed steps
      Failure/Error:
              def handle_one_step(task, sequence, step)
                step_handler = get_step_handler(step)
                return { error: 'Step handler not found' } unless step_handler
        
                step_handler.process(task, sequence, step)
              end

      ArgumentError:
        wrong number of arguments (given 1, expected 3)
      # ./lib/tasker_core/task_handler/base.rb:322:in `handle_one_step'
      # ./spec/handlers/integration/step_by_step_integration_spec.rb:185:in `block (4 levels) in <top (required)>'

  15) Order Fulfillment FFI Integration complete workflow execution executes full order fulfillment workflow through FFI layer
      Failure/Error: expect(execution_result.status).to eq('complete')

        expected: "complete"
             got: "failed"

        (compared using ==)
      # ./spec/handlers/integration/order_fulfillment_integration_spec.rb:147:in `block (3 levels) in <top (required)>'

  16) Order Fulfillment FFI Integration complete workflow execution handles premium customer optimization correctly
      Failure/Error: expect(execution_result.status).to eq('complete')

        expected: "complete"
             got: "failed"

        (compared using ==)
      # ./spec/handlers/integration/order_fulfillment_integration_spec.rb:212:in `block (3 levels) in <top (required)>'

  17) Order Fulfillment FFI Integration performance validation completes workflow within performance targets
      Failure/Error: expect(execution_result.status).to eq('complete')

        expected: "complete"
             got: "failed"

        (compared using ==)
      # ./spec/handlers/integration/order_fulfillment_integration_spec.rb:390:in `block (3 levels) in <top (required)>'

  18) Order Fulfillment FFI Integration error handling and recovery handles validation errors correctly
      Failure/Error: expect(step_result['status']).to eq('error')

        expected: "error"
             got: "complete"

        (compared using ==)
      # ./spec/handlers/integration/order_fulfillment_integration_spec.rb:597:in `validate_step_error'
      # ./spec/handlers/integration/order_fulfillment_integration_spec.rb:261:in `block (3 levels) in <top (required)>'

  19) Handle-Based FFI Architecture FFI boundary validation validates proper Ruby-Rust data conversion
      Failure/Error: expect(returned_context['float_value']).to be_within(0.0001).of(3.14159)
        expected 3 to be within 0.0001 of 3.14159
      # ./spec/architecture/handle_integration_spec.rb:320:in `block (3 levels) in <top (required)>'

  20) ZeroMQ Message Flow Message Protocol Communication Direct Message Processing processes step messages directly without handler infrastructure
      Failure/Error:
              Class.new(TaskerCore::Execution::ZeroMQHandler) do
                def initialize
                  super(
                    step_sub_endpoint: 'inproc://test_steps',
                    result_pub_endpoint: 'inproc://test_results',
--
                private

      NameError:
        uninitialized constant TaskerCore::Execution::ZeroMQHandler
      # ./spec/handlers/integration/zeromq_message_flow_spec.rb:157:in `create_test_message_handler'
      # ./spec/handlers/integration/zeromq_message_flow_spec.rb:22:in `block (4 levels) in <top (required)>'

  21) ZeroMQ Message Flow Message Protocol Communication Direct Message Processing handles message parsing errors gracefully
      Failure/Error:
              Class.new(TaskerCore::Execution::ZeroMQHandler) do
                def initialize
                  super(
                    step_sub_endpoint: 'inproc://test_steps',
                    result_pub_endpoint: 'inproc://test_results',
--
                private

      NameError:
        uninitialized constant TaskerCore::Execution::ZeroMQHandler
      # ./spec/handlers/integration/zeromq_message_flow_spec.rb:157:in `create_test_message_handler'
      # ./spec/handlers/integration/zeromq_message_flow_spec.rb:68:in `block (4 levels) in <top (required)>'

  22) ZeroMQ Message Flow Message Protocol Communication Direct Message Processing processes multiple steps in sequence
      Failure/Error:
              Class.new(TaskerCore::Execution::ZeroMQHandler) do
                def initialize
                  super(
                    step_sub_endpoint: 'inproc://test_steps',
                    result_pub_endpoint: 'inproc://test_results',
--
                private

      NameError:
        uninitialized constant TaskerCore::Execution::ZeroMQHandler
      # ./spec/handlers/integration/zeromq_message_flow_spec.rb:157:in `create_test_message_handler'
      # ./spec/handlers/integration/zeromq_message_flow_spec.rb:115:in `block (4 levels) in <top (required)>'

  23) Task Dependency Creation Integration with Orchestration System supports end-to-end task lifecycle
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/architecture/handlers/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/architecture/dependency_creation_spec.rb:11:in `block (2 levels) in <top (required)>'
      # ./spec/architecture/dependency_creation_spec.rb:51:in `block (2 levels) in <top (required)>'

  24) Task Dependency Creation Integration with Orchestration System integrates with TaskerCore orchestration components
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/architecture/handlers/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/architecture/dependency_creation_spec.rb:11:in `block (2 levels) in <top (required)>'
      # ./spec/architecture/dependency_creation_spec.rb:51:in `block (2 levels) in <top (required)>'

  25) Task Dependency Creation Handler Registration and Initialization finds and initializes handler instance
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/architecture/handlers/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/architecture/dependency_creation_spec.rb:11:in `block (2 levels) in <top (required)>'
      # ./spec/architecture/dependency_creation_spec.rb:51:in `block (2 levels) in <top (required)>'

  26) Task Dependency Creation Handler Registration and Initialization registers handler successfully
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/architecture/handlers/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/architecture/dependency_creation_spec.rb:11:in `block (2 levels) in <top (required)>'
      # ./spec/architecture/dependency_creation_spec.rb:51:in `block (2 levels) in <top (required)>'

  27) Task Dependency Creation Handler Registration and Initialization loads configuration from YAML file
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/architecture/handlers/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/architecture/dependency_creation_spec.rb:11:in `block (2 levels) in <top (required)>'
      # ./spec/architecture/dependency_creation_spec.rb:51:in `block (2 levels) in <top (required)>'

  28) Task Dependency Creation Task Creation and Dependency Resolution creates handler instance successfully
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/architecture/handlers/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/architecture/dependency_creation_spec.rb:11:in `block (2 levels) in <top (required)>'
      # ./spec/architecture/dependency_creation_spec.rb:51:in `block (2 levels) in <top (required)>'

  29) Task Dependency Creation Task Creation and Dependency Resolution task initialization returns initialization result with task information
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/architecture/handlers/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/architecture/dependency_creation_spec.rb:11:in `block (2 levels) in <top (required)>'
      # ./spec/architecture/dependency_creation_spec.rb:51:in `block (2 levels) in <top (required)>'

  30) Task Dependency Creation Task Creation and Dependency Resolution task initialization creates workflow steps with dependencies
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/architecture/handlers/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/architecture/dependency_creation_spec.rb:11:in `block (2 levels) in <top (required)>'
      # ./spec/architecture/dependency_creation_spec.rb:51:in `block (2 levels) in <top (required)>'

  31) Task Dependency Creation Task Creation and Dependency Resolution task initialization initializes task without errors
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/architecture/handlers/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/architecture/dependency_creation_spec.rb:11:in `block (2 levels) in <top (required)>'
      # ./spec/architecture/dependency_creation_spec.rb:51:in `block (2 levels) in <top (required)>'

  32) Task Dependency Creation Dependency Chain Analysis creates proper step dependency relationships
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/architecture/handlers/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/architecture/dependency_creation_spec.rb:11:in `block (2 levels) in <top (required)>'
      # ./spec/architecture/dependency_creation_spec.rb:51:in `block (2 levels) in <top (required)>'

  33) Task Dependency Creation Dependency Chain Analysis establishes workflow step execution order
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/architecture/handlers/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/architecture/dependency_creation_spec.rb:11:in `block (2 levels) in <top (required)>'
      # ./spec/architecture/dependency_creation_spec.rb:51:in `block (2 levels) in <top (required)>'

  34) Task Dependency Creation Task Request Structure builds test task request with proper structure
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/architecture/handlers/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/architecture/dependency_creation_spec.rb:11:in `block (2 levels) in <top (required)>'
      # ./spec/architecture/dependency_creation_spec.rb:51:in `block (2 levels) in <top (required)>'

  35) Task Dependency Creation Task Request Structure provides realistic test data structure
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/architecture/handlers/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/architecture/dependency_creation_spec.rb:11:in `block (2 levels) in <top (required)>'
      # ./spec/architecture/dependency_creation_spec.rb:51:in `block (2 levels) in <top (required)>'

  36) Task Dependency Creation Task Request Structure includes required fulfillment context data
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/architecture/handlers/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/architecture/dependency_creation_spec.rb:11:in `block (2 levels) in <top (required)>'
      # ./spec/architecture/dependency_creation_spec.rb:51:in `block (2 levels) in <top (required)>'

  37) BatchStepExecutionOrchestrator Implementation BatchStepExecutionOrchestrator callable resolution and execution executes callable successfully
      Failure/Error:
        orchestrator_class::TaskStruct.new(
          task_id: 123,
          context: { order_id: 'order_123', customer: 'John Doe' },
          metadata: { priority: 'high' }
        )

      NameError:
        uninitialized constant TaskerCore::Orchestration::BatchStepExecutionOrchestrator::TaskStruct
      # ./spec/integration/batch_orchestrator_spec.rb:139:in `block (4 levels) in <top (required)>'
      # ./spec/integration/batch_orchestrator_spec.rb:185:in `block (4 levels) in <top (required)>'

  38) BatchStepExecutionOrchestrator Implementation BatchStepExecutionOrchestrator data structures TaskStruct creates TaskStruct successfully
      Failure/Error:
        task_struct = orchestrator_class::TaskStruct.new(
          task_id: 123,
          context: { order_id: 'order_123', customer: 'John Doe' },
          metadata: { priority: 'high' }
        )

      NameError:
        uninitialized constant TaskerCore::Orchestration::BatchStepExecutionOrchestrator::TaskStruct
      # ./spec/integration/batch_orchestrator_spec.rb:92:in `block (5 levels) in <top (required)>'

  39) BatchStepExecutionOrchestrator Implementation BatchStepExecutionOrchestrator data structures StepStruct creates StepStruct successfully
      Failure/Error:
        step_struct = orchestrator_class::StepStruct.new(
          step_id: 456,
          step_name: 'process_payment',
          handler_config: { timeout_seconds: 30 },
          timeout_ms: 30000,
--
        )

      NameError:
        uninitialized constant TaskerCore::Orchestration::BatchStepExecutionOrchestrator::StepStruct
      # ./spec/integration/batch_orchestrator_spec.rb:120:in `block (5 levels) in <top (required)>'

  40) BatchStepExecutionOrchestrator Implementation BatchStepExecutionOrchestrator data structures SequenceStruct creates SequenceStruct successfully
      Failure/Error:
        sequence_struct = orchestrator_class::SequenceStruct.new(
          sequence_number: 1,
          total_steps: 3,
          previous_results: { validate_order: { status: 'completed' } }
        )

      NameError:
        uninitialized constant TaskerCore::Orchestration::BatchStepExecutionOrchestrator::SequenceStruct
      # ./spec/integration/batch_orchestrator_spec.rb:106:in `block (5 levels) in <top (required)>'

  41) BatchStepExecutionOrchestrator Implementation BatchStepExecutionOrchestrator instantiation creates orchestrator successfully
      Failure/Error:
        def initialize(config: nil, handler_registry: nil, zmq_orchestrator: nil)
          @config = config || TaskerCore::Config.instance.zeromq
          
          # Compose ZeroMQ orchestrator for socket management
          @zmq_orchestrator = zmq_orchestrator || ZeromqOrchestrator.new(config: @config)
--
            max_threads: @config.max_workers,

      ArgumentError:
        unknown keywords: :step_sub_endpoint, :result_pub_endpoint, :max_workers
      # ./lib/tasker_core/orchestration/batch_step_execution_orchestrator.rb:48:in `initialize'
      # ./spec/integration/batch_orchestrator_spec.rb:61:in `new'
      # ./spec/integration/batch_orchestrator_spec.rb:61:in `block (3 levels) in <top (required)>'
      # ./spec/integration/batch_orchestrator_spec.rb:77:in `block (4 levels) in <top (required)>'

  42) BatchStepExecutionOrchestrator Implementation Integration Readiness has all required components for ZeroMQ integration
      Failure/Error:
        def initialize(config: nil, handler_registry: nil, zmq_orchestrator: nil)
          @config = config || TaskerCore::Config.instance.zeromq
          
          # Compose ZeroMQ orchestrator for socket management
          @zmq_orchestrator = zmq_orchestrator || ZeromqOrchestrator.new(config: @config)
--
            max_threads: @config.max_workers,

      ArgumentError:
        unknown keywords: :step_sub_endpoint, :result_pub_endpoint, :max_workers
      # ./lib/tasker_core/orchestration/batch_step_execution_orchestrator.rb:48:in `initialize'
      # ./spec/integration/batch_orchestrator_spec.rb:199:in `new'
      # ./spec/integration/batch_orchestrator_spec.rb:199:in `block (3 levels) in <top (required)>'

  43) handle_one_step method #handle_one_step has the correct method signature and validation
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/handlers/unit/handle_one_step_spec.rb:7:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/unit/handle_one_step_spec.rb:33:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/unit/handle_one_step_spec.rb:57:in `block (3 levels) in <top (required)>'

  44) handle_one_step method #handle_one_step StepHandleResult convenience methods provides success status methods
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/handlers/unit/handle_one_step_spec.rb:7:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/unit/handle_one_step_spec.rb:33:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/unit/handle_one_step_spec.rb:126:in `block (4 levels) in <top (required)>'
      # ./spec/handlers/unit/handle_one_step_spec.rb:129:in `block (4 levels) in <top (required)>'

  45) handle_one_step method #handle_one_step StepHandleResult convenience methods provides hash conversion
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/handlers/unit/handle_one_step_spec.rb:7:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/unit/handle_one_step_spec.rb:33:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/unit/handle_one_step_spec.rb:126:in `block (4 levels) in <top (required)>'
      # ./spec/handlers/unit/handle_one_step_spec.rb:136:in `block (4 levels) in <top (required)>'

  46) handle_one_step method #handle_one_step when called with invalid parameters validates step_id parameter type
      Failure/Error:
        expect {
          handler_instance.handle_one_step("invalid")
        }.to raise_error(TaskerCore::ValidationError, /must be an integer/)

        expected TaskerCore::ValidationError with message matching /must be an integer/, got #<Errno::ENOENT: No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/examples/order_fulfillment/config/order_fulfillment_handler.yaml> with backtrace:
          # ./spec/handlers/unit/handle_one_step_spec.rb:7:in `block (2 levels) in <top (required)>'
          # ./spec/handlers/unit/handle_one_step_spec.rb:33:in `block (2 levels) in <top (required)>'
          # ./spec/handlers/unit/handle_one_step_spec.rb:97:in `block (5 levels) in <top (required)>'
          # ./spec/handlers/unit/handle_one_step_spec.rb:96:in `block (4 levels) in <top (required)>'
      # ./spec/handlers/unit/handle_one_step_spec.rb:96:in `block (4 levels) in <top (required)>'

  47) handle_one_step method #handle_one_step when called with invalid parameters validates step_id is not nil
      Failure/Error:
        expect {
          handler_instance.handle_one_step(nil)
        }.to raise_error(TaskerCore::ValidationError, /is required/)

        expected TaskerCore::ValidationError with message matching /is required/, got #<Errno::ENOENT: No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/examples/order_fulfillment/config/order_fulfillment_handler.yaml> with backtrace:
          # ./spec/handlers/unit/handle_one_step_spec.rb:7:in `block (2 levels) in <top (required)>'
          # ./spec/handlers/unit/handle_one_step_spec.rb:33:in `block (2 levels) in <top (required)>'
          # ./spec/handlers/unit/handle_one_step_spec.rb:103:in `block (5 levels) in <top (required)>'
          # ./spec/handlers/unit/handle_one_step_spec.rb:102:in `block (4 levels) in <top (required)>'
      # ./spec/handlers/unit/handle_one_step_spec.rb:102:in `block (4 levels) in <top (required)>'

  48) handle_one_step method #handle_one_step when called with invalid parameters handles missing Rust handler gracefully
      Failure/Error:
        expect {
          handler_without_rust.handle_one_step(123)
        }.to raise_error(NotImplementedError, /requires Rust handler/)

        expected NotImplementedError with message matching /requires Rust handler/, got #<ArgumentError: wrong number of arguments (given 1, expected 3)> with backtrace:
          # ./lib/tasker_core/task_handler/base.rb:322:in `handle_one_step'
          # ./spec/handlers/unit/handle_one_step_spec.rb:120:in `block (5 levels) in <top (required)>'
          # ./spec/handlers/unit/handle_one_step_spec.rb:119:in `block (4 levels) in <top (required)>'
      # ./spec/handlers/unit/handle_one_step_spec.rb:119:in `block (4 levels) in <top (required)>'

  49) handle_one_step method #handle_one_step when called with non-existent step ID returns error result with proper structure
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/handlers/unit/handle_one_step_spec.rb:7:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/unit/handle_one_step_spec.rb:33:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/unit/handle_one_step_spec.rb:63:in `block (4 levels) in <top (required)>'

  50) handle_one_step method #handle_one_step when called with non-existent step ID provides comprehensive debugging information
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/handlers/unit/handle_one_step_spec.rb:7:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/unit/handle_one_step_spec.rb:33:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/unit/handle_one_step_spec.rb:74:in `block (4 levels) in <top (required)>'

  51) handle_one_step method #handle_one_step FFI integration maintains data integrity across FFI boundary
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/handlers/unit/handle_one_step_spec.rb:7:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/unit/handle_one_step_spec.rb:33:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/unit/handle_one_step_spec.rb:175:in `block (4 levels) in <top (required)>'

  52) handle_one_step method #handle_one_step FFI integration successfully delegates to Rust BaseTaskHandler
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/handlers/unit/handle_one_step_spec.rb:7:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/unit/handle_one_step_spec.rb:33:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/unit/handle_one_step_spec.rb:167:in `block (4 levels) in <top (required)>'

  53) handle_one_step method #handle_one_step method capabilities integration includes handle_one_step in capabilities
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/handlers/unit/handle_one_step_spec.rb:7:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/unit/handle_one_step_spec.rb:33:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/unit/handle_one_step_spec.rb:155:in `block (4 levels) in <top (required)>'

  54) handle_one_step method #handle_one_step method capabilities integration supports handle_one_step capability check
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/handlers/unit/handle_one_step_spec.rb:7:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/unit/handle_one_step_spec.rb:33:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/unit/handle_one_step_spec.rb:160:in `block (4 levels) in <top (required)>'

  55) Step Results Persistence Step Execution and Results Persistence subsequent step execution accesses persisted results from previous steps
      Failure/Error: let(:handle) { TaskerCore.create_orchestration_handle }

      NoMethodError:
        undefined method `create_orchestration_handle' for TaskerCore:Module
      # ./spec/integration/step_results_persistence_spec.rb:6:in `block (2 levels) in <top (required)>'
      # ./spec/integration/step_results_persistence_spec.rb:16:in `block (2 levels) in <top (required)>'

  56) Step Results Persistence Step Execution and Results Persistence subsequent step execution maintains step execution sequence
      Failure/Error: let(:handle) { TaskerCore.create_orchestration_handle }

      NoMethodError:
        undefined method `create_orchestration_handle' for TaskerCore:Module
      # ./spec/integration/step_results_persistence_spec.rb:6:in `block (2 levels) in <top (required)>'
      # ./spec/integration/step_results_persistence_spec.rb:16:in `block (2 levels) in <top (required)>'

  57) Step Results Persistence Step Execution and Results Persistence first step execution persists step results to database
      Failure/Error: let(:handle) { TaskerCore.create_orchestration_handle }

      NoMethodError:
        undefined method `create_orchestration_handle' for TaskerCore:Module
      # ./spec/integration/step_results_persistence_spec.rb:6:in `block (2 levels) in <top (required)>'
      # ./spec/integration/step_results_persistence_spec.rb:16:in `block (2 levels) in <top (required)>'

  58) Step Results Persistence Step Execution and Results Persistence first step execution executes first step successfully
      Failure/Error: let(:handle) { TaskerCore.create_orchestration_handle }

      NoMethodError:
        undefined method `create_orchestration_handle' for TaskerCore:Module
      # ./spec/integration/step_results_persistence_spec.rb:6:in `block (2 levels) in <top (required)>'
      # ./spec/integration/step_results_persistence_spec.rb:16:in `block (2 levels) in <top (required)>'

  59) Step Results Persistence Task and Step Creation creates test task with linear pattern
      Failure/Error: let(:handle) { TaskerCore.create_orchestration_handle }

      NoMethodError:
        undefined method `create_orchestration_handle' for TaskerCore:Module
      # ./spec/integration/step_results_persistence_spec.rb:6:in `block (2 levels) in <top (required)>'
      # ./spec/integration/step_results_persistence_spec.rb:16:in `block (2 levels) in <top (required)>'

  60) Step Results Persistence Task and Step Creation registers step handlers successfully
      Failure/Error: let(:handle) { TaskerCore.create_orchestration_handle }

      NoMethodError:
        undefined method `create_orchestration_handle' for TaskerCore:Module
      # ./spec/integration/step_results_persistence_spec.rb:6:in `block (2 levels) in <top (required)>'
      # ./spec/integration/step_results_persistence_spec.rb:16:in `block (2 levels) in <top (required)>'

  61) Step Results Persistence Task and Step Creation initializes orchestration system successfully
      Failure/Error: let(:handle) { TaskerCore.create_orchestration_handle }

      NoMethodError:
        undefined method `create_orchestration_handle' for TaskerCore:Module
      # ./spec/integration/step_results_persistence_spec.rb:6:in `block (2 levels) in <top (required)>'
      # ./spec/integration/step_results_persistence_spec.rb:16:in `block (2 levels) in <top (required)>'

  62) Step Results Persistence Database Persistence Validation persists step results in database for cross-step access
      Failure/Error: let(:handle) { TaskerCore.create_orchestration_handle }

      NoMethodError:
        undefined method `create_orchestration_handle' for TaskerCore:Module
      # ./spec/integration/step_results_persistence_spec.rb:6:in `block (2 levels) in <top (required)>'
      # ./spec/integration/step_results_persistence_spec.rb:16:in `block (2 levels) in <top (required)>'

  63) Step Results Persistence Database Persistence Validation supports step result retrieval across execution context
      Failure/Error: let(:handle) { TaskerCore.create_orchestration_handle }

      NoMethodError:
        undefined method `create_orchestration_handle' for TaskerCore:Module
      # ./spec/integration/step_results_persistence_spec.rb:6:in `block (2 levels) in <top (required)>'
      # ./spec/integration/step_results_persistence_spec.rb:16:in `block (2 levels) in <top (required)>'

  64) Step Results Persistence Results Chain Validation maintains results across step execution chain
      Failure/Error: let(:handle) { TaskerCore.create_orchestration_handle }

      NoMethodError:
        undefined method `create_orchestration_handle' for TaskerCore:Module
      # ./spec/integration/step_results_persistence_spec.rb:6:in `block (2 levels) in <top (required)>'
      # ./spec/integration/step_results_persistence_spec.rb:16:in `block (2 levels) in <top (required)>'

  65) Step Results Persistence Error Handling for Missing Results handles gracefully when results are not available
      Failure/Error: let(:handle) { TaskerCore.create_orchestration_handle }

      NoMethodError:
        undefined method `create_orchestration_handle' for TaskerCore:Module
      # ./spec/integration/step_results_persistence_spec.rb:6:in `block (2 levels) in <top (required)>'
      # ./spec/integration/step_results_persistence_spec.rb:16:in `block (2 levels) in <top (required)>'

  66) End-to-End Step Execution Sequential Step-by-Step Testing when testing order fulfillment step sequence tests individual step execution with dependency awareness
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:9:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:57:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:74:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:246:in `block (5 levels) in <top (required)>'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:245:in `each'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:245:in `block (4 levels) in <top (required)>'

  67) End-to-End Step Execution Sequential Step-by-Step Testing when testing order fulfillment step sequence validates expected fulfillment workflow structure
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:9:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:57:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:74:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:218:in `block (5 levels) in <top (required)>'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:213:in `each'
--

  68) End-to-End Step Execution Sequential Step-by-Step Testing when testing dependency management framework provides step discovery and organization capabilities
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:9:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:57:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:74:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:165:in `block (4 levels) in <top (required)>'

  69) End-to-End Step Execution Integration with existing workflow systems provides consistent task_id references across methods
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:9:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:57:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:402:in `block (3 levels) in <top (required)>'

  70) End-to-End Step Execution Integration with existing workflow systems maintains compatibility with existing handle(task_id) method
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:9:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:57:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:385:in `block (3 levels) in <top (required)>'

  71) End-to-End Step Execution Production-like Full Integration Testing executes complete order fulfillment workflow successfully
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:9:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:57:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:84:in `block (3 levels) in <top (required)>'

  72) End-to-End Step Execution Production-like Full Integration Testing provides consistent timing and performance metrics
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:9:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:57:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:138:in `block (4 levels) in <top (required)>'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:125:in `times'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:125:in `block (3 levels) in <top (required)>'

  73) End-to-End Step Execution Comprehensive Testing Framework Validation validates all StepHandleResult features work correctly
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:9:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:57:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:283:in `block (3 levels) in <top (required)>'

  74) End-to-End Step Execution Comprehensive Testing Framework Validation validates performance characteristics
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:9:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:57:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:334:in `block (3 levels) in <top (required)>'

  75) End-to-End Step Execution Comprehensive Testing Framework Validation validates error handling and edge cases
      Failure/Error: let(:config) { YAML.load_file(config_path) }

      Errno::ENOENT:
        No such file or directory @ rb_sysopen - /Users/petetaylor/projects/tasker-systems/tasker-core-rs/bindings/ruby/spec/examples/order_fulfillment/config/order_fulfillment_handler.yaml
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:9:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:57:in `block (2 levels) in <top (required)>'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:358:in `block (4 levels) in <top (required)>'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:355:in `each'
      # ./spec/handlers/integration/e2e_step_execution_spec.rb:355:in `block (3 levels) in <top (required)>'

  76) Ruby-Centric Step Handler Architecture Ruby-Centric Architecture Benefits provides direct Ruby object access for step execution
      Failure/Error: expect(step_handler).to be_a(ValidateOrderHandler)

      NameError:
        uninitialized constant ValidateOrderHandler
      # ./spec/architecture/ruby_centric_architecture_spec.rb:154:in `block (3 levels) in <top (required)>'

Finished in 14.09 seconds (files took 0.39499 seconds to load)
195 examples, 76 failures, 15 pending
--
rspec ./spec/integration/step_results_persistence_spec.rb:159 # Step Results Persistence Error Handling for Missing Results handles gracefully when results are not available
rspec ./spec/handlers/integration/e2e_step_execution_spec.rb:242 # End-to-End Step Execution Sequential Step-by-Step Testing when testing order fulfillment step sequence tests individual step execution with dependency awareness
rspec ./spec/handlers/integration/e2e_step_execution_spec.rb:210 # End-to-End Step Execution Sequential Step-by-Step Testing when testing order fulfillment step sequence validates expected fulfillment workflow structure
rspec ./spec/handlers/integration/e2e_step_execution_spec.rb:162 # End-to-End Step Execution Sequential Step-by-Step Testing when testing dependency management framework provides step discovery and organization capabilities
rspec ./spec/handlers/integration/e2e_step_execution_spec.rb:400 # End-to-End Step Execution Integration with existing workflow systems provides consistent task_id references across methods
rspec ./spec/handlers/integration/e2e_step_execution_spec.rb:381 # End-to-End Step Execution Integration with existing workflow systems maintains compatibility with existing handle(task_id) method
rspec ./spec/handlers/integration/e2e_step_execution_spec.rb:80 # End-to-End Step Execution Production-like Full Integration Testing executes complete order fulfillment workflow successfully
rspec ./spec/handlers/integration/e2e_step_execution_spec.rb:121 # End-to-End Step Execution Production-like Full Integration Testing provides consistent timing and performance metrics
