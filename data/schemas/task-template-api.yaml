openapi: 3.0.3
info:
  title: Tasker TaskTemplate API
  description: |
    API for managing and executing Tasker workflow templates with self-describing configuration.
    
    This API provides comprehensive TaskTemplate management capabilities including:
    - Creating, updating, and deleting task templates
    - Environment-specific template resolution
    - Template validation with JSON Schema
    - Task execution from templates
    - Template discovery and metadata management
  version: 1.0.0
  contact:
    name: Tasker Team
    email: support@tasker.systems
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.tasker.systems/v1
    description: Production API
  - url: https://staging-api.tasker.systems/v1
    description: Staging API
  - url: http://localhost:3000/api/v1
    description: Development API

tags:
  - name: templates
    description: TaskTemplate management operations
  - name: execution
    description: Task execution operations
  - name: validation
    description: Template validation operations
  - name: discovery
    description: Template discovery and metadata operations

paths:
  /templates:
    get:
      tags:
        - templates
        - discovery
      summary: List all task templates
      description: |
        Retrieve a paginated list of task templates with optional filtering.
        Supports filtering by namespace, tags, and other metadata.
      operationId: listTemplates
      parameters:
        - name: namespace
          in: query
          schema:
            type: string
            pattern: '^[a-z][a-z0-9_]*$'
          description: Filter by namespace
          example: fulfillment
        - name: tag
          in: query
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
          description: Filter by tags (comma-separated)
          example: "pattern:linear,namespace:fulfillment"
        - name: version
          in: query
          schema:
            type: string
            pattern: '^\d+\.\d+\.\d+$'
          description: Filter by specific version
          example: "1.0.0"
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of results per page
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  templates:
                    type: array
                    items:
                      $ref: '#/components/schemas/TaskTemplateSummary'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

    post:
      tags:
        - templates
      summary: Create a new task template
      description: |
        Create a new task template from YAML or JSON configuration.
        The template will be validated against the TaskTemplate JSON Schema.
      operationId: createTemplate
      requestBody:
        required: true
        content:
          application/yaml:
            schema:
              $ref: '#/components/schemas/TaskTemplate'
            example: |
              name: credit_card_payment
              namespace_name: payments
              version: "1.0.0"
              description: "Process credit card payments"
              steps:
                - name: validate_payment
                  handler:
                    callable: "PaymentProcessing::ValidationHandler"
          application/json:
            schema:
              $ref: '#/components/schemas/TaskTemplate'
      responses:
        '201':
          description: Template created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskTemplateResponse'
        '400':
          description: Invalid template format or validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '409':
          description: Template with same namespace/name/version already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'

  /templates/{namespace}/{name}:
    get:
      tags:
        - templates
      summary: Get a specific task template
      description: |
        Retrieve a specific task template, optionally resolved for a specific environment.
        If no version is specified, returns the latest version.
      operationId: getTemplate
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
            pattern: '^[a-z][a-z0-9_]*$'
          description: Template namespace
          example: fulfillment
        - name: name
          in: path
          required: true
          schema:
            type: string
            pattern: '^[a-z][a-z0-9_]*$'
          description: Template name
          example: process_order
        - name: version
          in: query
          schema:
            type: string
            pattern: '^\d+\.\d+\.\d+$'
          description: Specific version (defaults to latest)
          example: "1.0.0"
        - name: environment
          in: query
          schema:
            type: string
          description: |
            Resolve template for specific environment.
            Accepts any environment name (development, test, staging, production, custom environments).
          example: development
      responses:
        '200':
          description: Template found
          content:
            application/yaml:
              schema:
                $ref: '#/components/schemas/TaskTemplate'
            application/json:
              schema:
                $ref: '#/components/schemas/TaskTemplate'
        '404':
          description: Template not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

    put:
      tags:
        - templates
      summary: Update an existing task template
      description: |
        Update an existing task template. Creates a new version if version differs.
        Template must pass validation against JSON Schema.
      operationId: updateTemplate
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
            pattern: '^[a-z][a-z0-9_]*$'
          description: Template namespace
        - name: name
          in: path
          required: true
          schema:
            type: string
            pattern: '^[a-z][a-z0-9_]*$'
          description: Template name
      requestBody:
        required: true
        content:
          application/yaml:
            schema:
              $ref: '#/components/schemas/TaskTemplate'
          application/json:
            schema:
              $ref: '#/components/schemas/TaskTemplate'
      responses:
        '200':
          description: Template updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskTemplateResponse'
        '201':
          description: New version created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskTemplateResponse'
        '400':
          description: Invalid template format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Template not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

    delete:
      tags:
        - templates
      summary: Delete a task template
      description: |
        Delete a specific version of a task template.
        If no version is specified, deletes all versions.
      operationId: deleteTemplate
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
            pattern: '^[a-z][a-z0-9_]*$'
          description: Template namespace
        - name: name
          in: path
          required: true
          schema:
            type: string
            pattern: '^[a-z][a-z0-9_]*$'
          description: Template name
        - name: version
          in: query
          schema:
            type: string
            pattern: '^\d+\.\d+\.\d+$'
          description: Specific version to delete (deletes all versions if omitted)
      responses:
        '204':
          description: Template deleted successfully
        '404':
          description: Template not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  /templates/validate:
    post:
      tags:
        - validation
      summary: Validate a task template
      description: |
        Validate a task template against the JSON Schema without creating it.
        Returns detailed validation results including errors and warnings.
      operationId: validateTemplate
      requestBody:
        required: true
        content:
          application/yaml:
            schema:
              $ref: '#/components/schemas/TaskTemplate'
          application/json:
            schema:
              $ref: '#/components/schemas/TaskTemplate'
      responses:
        '200':
          description: Validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    description: Overall validation status
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ValidationError'
                    description: Validation errors that prevent template usage
                  warnings:
                    type: array
                    items:
                      type: string
                    description: Validation warnings that don't prevent usage
                  schema_validation:
                    type: object
                    properties:
                      valid:
                        type: boolean
                      errors:
                        type: array
                        items:
                          type: string
                  dependency_validation:
                    type: object
                    properties:
                      valid:
                        type: boolean
                      circular_dependencies:
                        type: array
                        items:
                          type: string
                      missing_dependencies:
                        type: array
                        items:
                          type: string

  /templates/{namespace}/{name}/execute:
    post:
      tags:
        - execution
      summary: Execute a task from template
      description: |
        Create and execute a new task instance from a template.
        Input data must conform to the template's input_schema if defined.
      operationId: executeTask
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
            pattern: '^[a-z][a-z0-9_]*$'
          description: Template namespace
        - name: name
          in: path
          required: true
          schema:
            type: string
            pattern: '^[a-z][a-z0-9_]*$'
          description: Template name
        - name: version
          in: query
          schema:
            type: string
            pattern: '^\d+\.\d+\.\d+$'
          description: Specific template version (defaults to latest)
        - name: environment
          in: query
          schema:
            type: string
            default: production
          description: |
            Environment to execute in. Accepts any environment name.
            Template will be resolved for this environment before execution.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                input:
                  type: object
                  description: Input data matching the template's input_schema
                metadata:
                  type: object
                  properties:
                    initiator:
                      type: string
                      description: Who/what initiated this task
                    source_system:
                      type: string
                      description: Source system identifier
                    reason:
                      type: string
                      description: Reason for task execution
                    priority:
                      type: integer
                      minimum: 1
                      maximum: 10
                      default: 5
                    claim_timeout_seconds:
                      type: integer
                      minimum: 30
                      maximum: 3600
                      default: 300
              required: [input]
      responses:
        '202':
          description: Task execution started
          content:
            application/json:
              schema:
                type: object
                properties:
                  task_id:
                    type: string
                    format: uuid
                    description: Unique task identifier
                  task_uuid:
                    type: string
                    format: uuid
                    description: Task UUID for tracking
                  status:
                    type: string
                    enum: [pending, in_progress]
                    description: Initial task status
                  template:
                    type: object
                    properties:
                      namespace:
                        type: string
                      name:
                        type: string
                      version:
                        type: string
                      environment:
                        type: string
                  created_at:
                    type: string
                    format: date-time
                    description: Task creation timestamp
        '400':
          description: Invalid input or template validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Template not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  /templates/schema:
    get:
      tags:
        - validation
        - discovery
      summary: Get TaskTemplate JSON Schema
      description: |
        Retrieve the JSON Schema used for TaskTemplate validation.
        This is the canonical schema that all templates must conform to.
      operationId: getTemplateSchema
      responses:
        '200':
          description: JSON Schema for TaskTemplate
          content:
            application/json:
              schema:
                type: object
                description: JSON Schema object for TaskTemplate validation

components:
  schemas:
    TaskTemplate:
      type: object
      required: [name, namespace_name, version, steps]
      description: Complete task template with self-describing workflow configuration
      properties:
        name:
          type: string
          pattern: '^[a-z][a-z0-9_]*$'
          description: Unique task template name within namespace
        namespace_name:
          type: string
          pattern: '^[a-z][a-z0-9_]*$'
          description: Namespace for logical grouping
        version:
          type: string
          pattern: '^\d+\.\d+\.\d+$'
          description: Semantic version (x.y.z format)
        description:
          type: string
          description: Human-readable description of the task
        metadata:
          $ref: '#/components/schemas/TemplateMetadata'
        task_handler:
          $ref: '#/components/schemas/HandlerDefinition'
        system_dependencies:
          $ref: '#/components/schemas/SystemDependencies'
        domain_events:
          type: array
          items:
            $ref: '#/components/schemas/DomainEventDefinition'
          default: []
        input_schema:
          type: object
          description: JSON Schema for input validation
        steps:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/StepDefinition'
          description: Workflow step definitions (at least one required)
        environments:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EnvironmentOverride'
          description: Environment-specific configuration overrides

    TaskTemplateSummary:
      type: object
      description: Summary information for template listing
      properties:
        name:
          type: string
        namespace_name:
          type: string
        version:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        step_count:
          type: integer
          description: Number of steps in template
        has_environments:
          type: boolean
          description: Whether template has environment overrides
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    TaskTemplateResponse:
      type: object
      description: Response after template creation/update
      properties:
        template:
          $ref: '#/components/schemas/TaskTemplate'
        validation:
          type: object
          properties:
            valid:
              type: boolean
            warnings:
              type: array
              items:
                type: string
        operation:
          type: string
          enum: [created, updated, version_created]
          description: What operation was performed

    TemplateMetadata:
      type: object
      description: Template metadata for documentation and discovery
      properties:
        author:
          type: string
        tags:
          type: array
          items:
            type: string
          default: []
        documentation_url:
          type: string
          format: uri
        created_at:
          type: string
          description: ISO8601 formatted date-time string
        updated_at:
          type: string
          description: ISO8601 formatted date-time string

    HandlerDefinition:
      type: object
      required: [callable]
      description: Handler definition with callable and initialization parameters
      properties:
        callable:
          type: string
          pattern: '^[A-Z][A-Za-z0-9_]*(::[A-Z][A-Za-z0-9_]*)*$'
          description: Fully qualified class or module path
        initialization:
          type: object
          default: {}
          description: Handler-specific initialization parameters

    SystemDependencies:
      type: object
      description: External system dependencies
      properties:
        primary:
          type: string
          default: "default"
          description: Primary system interaction (accepts any string)
        secondary:
          type: array
          items:
            type: string
          default: []
          description: Secondary systems (accepts any string values)

    DomainEventDefinition:
      type: object
      required: [name]
      description: Domain event definition
      properties:
        name:
          type: string
          pattern: '^[a-z][a-z0-9_]*$'
        description:
          type: string
        schema:
          type: object
          description: JSON Schema for event payload

    StepDefinition:
      type: object
      required: [name, handler]
      description: Individual workflow step definition
      properties:
        name:
          type: string
          pattern: '^[a-z][a-z0-9_]*$'
        description:
          type: string
        handler:
          $ref: '#/components/schemas/HandlerDefinition'
        system_dependency:
          type: string
          description: System this step interacts with
        dependencies:
          type: array
          items:
            type: string
          default: []
          uniqueItems: true
          description: Dependencies on other steps by name
        retry:
          $ref: '#/components/schemas/RetryConfiguration'
        timeout_seconds:
          type: integer
          nullable: true
          minimum: 1
          maximum: 3600
          description: Step timeout in seconds
        publishes_events:
          type: array
          items:
            type: string
          default: []

    RetryConfiguration:
      type: object
      description: Retry configuration with backoff strategies
      properties:
        retryable:
          type: boolean
          default: true
        limit:
          type: integer
          minimum: 0
          maximum: 10
          default: 3
        backoff:
          type: string
          enum: [none, linear, exponential, fibonacci]
          default: exponential
        backoff_base_ms:
          type: integer
          nullable: true
          minimum: 100
          default: 1000
        max_backoff_ms:
          type: integer
          nullable: true
          minimum: 1000
          default: 30000

    EnvironmentOverride:
      type: object
      description: Environment-specific configuration overrides
      properties:
        task_handler:
          type: object
          properties:
            initialization:
              type: object
        steps:
          type: array
          items:
            type: object
            required: [name]
            properties:
              name:
                type: string
                pattern: '^([a-z][a-z0-9_]*|ALL)$'
              handler:
                type: object
                properties:
                  initialization:
                    type: object
              timeout_seconds:
                type: integer
                nullable: true
                minimum: 1
              retry:
                $ref: '#/components/schemas/RetryConfiguration'

    ValidationError:
      type: object
      description: Validation error details
      properties:
        field:
          type: string
          description: Field that failed validation
        message:
          type: string
          description: Human-readable error message
        code:
          type: string
          enum: [required, invalid_format, circular_dependency, unknown_reference, schema_violation]
          description: Machine-readable error code
        path:
          type: string
          description: JSON path to the problematic field

    ConflictError:
      type: object
      description: Resource conflict error
      properties:
        message:
          type: string
        existing_resource:
          type: object
          description: Information about the conflicting resource

    NotFoundError:
      type: object
      description: Resource not found error
      properties:
        message:
          type: string
        resource_type:
          type: string
          enum: [template, namespace]
        resource_identifier:
          type: string

    Pagination:
      type: object
      description: Pagination information
      properties:
        page:
          type: integer
          minimum: 1
        limit:
          type: integer
          minimum: 1
          maximum: 100
        total:
          type: integer
          minimum: 0
        total_pages:
          type: integer
          minimum: 0
        has_next:
          type: boolean
        has_previous:
          type: boolean

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT-based authentication
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key authentication

security:
  - BearerAuth: []
  - ApiKeyAuth: []